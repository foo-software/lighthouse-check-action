#! /usr/bin/env node
"use strict";

var _ora = _interopRequireDefault(require("ora"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _getHelpText = _interopRequireDefault(require("../helpers/getHelpText"));

var _lighthouseCheck = _interopRequireDefault(require("../lighthouseCheck"));

var _constants = require("../constants");

var _arguments = require("../helpers/arguments");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultOptions = {
  author: {
    type: 'string',
    value: undefined
  },
  apiToken: {
    type: 'string',
    value: undefined
  },
  awsAccessKeyId: {
    type: 'string',
    value: undefined
  },
  awsBucket: {
    type: 'string',
    value: undefined
  },
  awsRegion: {
    type: 'string',
    value: undefined
  },
  awsSecretAccessKey: {
    type: 'string',
    value: undefined
  },
  branch: {
    type: 'string',
    value: undefined
  },
  configFile: {
    type: 'string',
    value: undefined
  },
  device: {
    type: 'string',
    value: undefined
  },
  emulatedFormFactor: {
    type: 'string',
    value: undefined
  },
  extraHeaders: {
    type: 'object',
    value: undefined
  },
  locale: {
    type: 'string',
    value: undefined
  },
  help: {
    type: 'boolean',
    value: undefined
  },
  isGitHubAction: {
    type: 'boolean',
    value: undefined
  },
  isOrb: {
    type: 'boolean',
    value: undefined
  },
  maxRetries: {
    type: 'number',
    value: 0
  },
  maxWaitForLoad: {
    type: 'number',
    value: undefined
  },
  outputDirectory: {
    type: 'string',
    value: undefined
  },
  overridesJsonFile: {
    type: 'string',
    value: undefined
  },
  pr: {
    type: 'string',
    value: undefined
  },
  prCommentAccessToken: {
    type: 'string',
    value: undefined
  },
  prCommentEnabled: {
    type: 'boolean',
    value: true
  },
  prCommentSaveOld: {
    type: 'boolean',
    value: false
  },
  prCommentUrl: {
    type: 'string',
    value: undefined
  },
  sha: {
    type: 'string',
    value: undefined
  },
  slackWebhookUrl: {
    type: 'string',
    value: undefined
  },
  tag: {
    type: 'string',
    value: undefined
  },
  timeout: {
    type: 'number',
    value: undefined
  },
  throttling: {
    type: 'string',
    value: undefined
  },
  throttlingMethod: {
    type: 'string',
    value: undefined
  },
  urls: {
    type: 'array',
    value: undefined
  },
  verbose: {
    type: 'boolean',
    value: false
  },
  wait: {
    type: 'boolean',
    value: undefined
  }
}; // override options with any that are passed in as arguments

let params = (0, _arguments.convertOptionsFromArguments)(defaultOptions);

const init = async () => {
  const spinner = (0, _ora.default)(`${_constants.NAME}: Running...\n`);

  try {
    if (params.configFile) {
      const configFile = _path.default.resolve(params.configFile);

      const configJsonString = _fs.default.readFileSync(configFile).toString();

      const configJson = JSON.parse(configJsonString); // extend params with config json file contents

      params = { ...params,
        ...configJson
      };
    }

    if (!params.verbose) {
      console.log('\n');
      spinner.start();
    }

    await (0, _lighthouseCheck.default)(params);
    process.exit();
  } catch (error) {
    if (!params.verbose) {
      spinner.stop();
    } else {
      console.log('\n');
    }

    console.log('‚ùå  Something went wrong while attempting to enqueue URLs for Lighthouse. See the error below.\n\n', error);
    console.log('\n');
    process.exit(1);
  }
};

if (params.help) {
  console.log((0, _getHelpText.default)(_constants.NAME));
} else {
  init();
}