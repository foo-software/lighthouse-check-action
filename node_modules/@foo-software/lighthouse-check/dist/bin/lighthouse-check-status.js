#! /usr/bin/env node
"use strict";

var _ora = _interopRequireDefault(require("ora"));

var _getHelpText = _interopRequireDefault(require("../helpers/getHelpText"));

var _validateStatus = _interopRequireDefault(require("../validateStatus"));

var _constants = require("../constants");

var _arguments = require("../helpers/arguments");

var _errorCodes = require("../errorCodes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultOptions = {
  minAccessibilityScore: {
    type: 'number',
    value: undefined
  },
  minBestPracticesScore: {
    type: 'number',
    value: undefined
  },
  minPerformanceScore: {
    type: 'number',
    value: undefined
  },
  minProgressiveWebAppScore: {
    type: 'number',
    value: undefined
  },
  minSeoScore: {
    type: 'number',
    value: undefined
  },
  help: {
    type: 'boolean',
    value: undefined
  },
  outputDirectory: {
    type: 'string',
    value: undefined
  },
  verbose: {
    type: 'boolean',
    value: false
  }
}; // override options with any that are passed in as arguments

let params = (0, _arguments.convertOptionsFromArguments)(defaultOptions);

const init = async () => {
  const spinner = (0, _ora.default)(`${_constants.NAME}: Running...\n`);

  try {
    if (!params.verbose) {
      console.log('\n');
      spinner.start();
    }

    await (0, _validateStatus.default)(params);
    process.exit();
  } catch (error) {
    if (!params.verbose) {
      spinner.stop();
    } else {
      console.log('\n');
    }

    if (error && error.code && error.code === _errorCodes.ERROR_INVALID) {
      console.log('❌  ', `${error}`);
    } else {
      console.log('❌  Something went wrong while attempting to enqueue URLs for Lighthouse. See the error below.\n\n', error);
    }

    console.log('\n');
    process.exit(1);
  }
};

if (params.help) {
  console.log((0, _getHelpText.default)(_constants.NAME_STATUS));
} else {
  init();
}