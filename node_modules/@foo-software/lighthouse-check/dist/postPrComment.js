"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fetch = _interopRequireDefault(require("./fetch"));

var _getLighthouseScoreColor = _interopRequireDefault(require("./helpers/getLighthouseScoreColor"));

var _lighthouseAuditTitles = _interopRequireDefault(require("./lighthouseAuditTitles"));

var _LighthouseCheckError = _interopRequireDefault(require("./LighthouseCheckError"));

var _errorCodes = require("./errorCodes");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getBadge = ({
  title,
  score
}) => `![](https://img.shields.io/badge/${title}-${score}-${(0, _getLighthouseScoreColor.default)({
  isHex: false,
  score
})}?style=flat-square) `;

var _default = async ({
  isGitHubAction,
  isLocalAudit,
  isOrb,
  prCommentAccessToken,
  prCommentSaveOld,
  prCommentUrl,
  results,
  verbose
}) => {
  try {
    let markdown = '';
    results.forEach(result => {
      // badges
      Object.keys(result.scores).forEach(current => {
        markdown += getBadge({
          title: _lighthouseAuditTitles.default[current].replace(/ /g, '%20'),
          score: result.scores[current]
        });
      }); // table header

      markdown += `\n| Device ${!result.report ? '' : `| Report `}| URL |\n`;
      markdown += `|--${!result.report ? '' : `|--`}|--|\n`; // the emulatedformfactor

      markdown += `| ${result.emulatedFormFactor} `; // if we have a URL for the full report

      if (result.report) {
        markdown += `| [report](${result.report}) `;
      } // the url


      markdown += `| ${result.url} |\n\n`;
    });
    markdown += 'Not what you expected? Are your scores flaky? ';
    markdown += `[Run Lighthouse on Foo](https://www.foo.software/lighthouse)\n`;

    if (isLocalAudit) {
      markdown += 'If scores continue to be inconsistent consider [running all audits on Foo]';

      if (isGitHubAction) {
        markdown += '(https://github.com/foo-software/lighthouse-check-action#usage-foos-automated-lighthouse-check-api)\n';
      } else if (isOrb) {
        markdown += '(https://github.com/foo-software/lighthouse-check-orb#usage-foo-api)\n';
      } else {
        markdown += '(https://github.com/foo-software/lighthouse-check#foos-automated-lighthouse-check-api-usage)\n';
      }
    } // create an identifier within the comment when searching comments
    // in the future


    const commentIdentifier = '<!-- generated by lighthouse-check -->';
    markdown += commentIdentifier; // establish existing comment

    let existingComment; // if we aren't saving old comments

    if (!prCommentSaveOld) {
      // get existing comments to see if we've already posted scores
      const existingCommentsResult = await (0, _fetch.default)(prCommentUrl, {
        method: 'get',
        headers: {
          'content-type': 'application/json',
          authorization: `token ${prCommentAccessToken}`
        }
      });
      const existingCommentsJsonResult = await existingCommentsResult.json();

      if (Array.isArray(existingCommentsJsonResult) && existingCommentsJsonResult.length) {
        existingComment = existingCommentsJsonResult.find(current => current.body.includes(commentIdentifier));
      }
    } // create or update the comment with scores


    const shouldUpdate = existingComment && existingComment.id;
    const url = !shouldUpdate ? prCommentUrl : `${prCommentUrl}/${existingComment.id}`;
    const result = await (0, _fetch.default)(url, {
      method: !shouldUpdate ? 'post' : 'put',
      body: JSON.stringify({ ...(shouldUpdate ? {} : {
          event: 'COMMENT'
        }),
        body: markdown
      }),
      headers: {
        'content-type': 'application/json',
        authorization: `token ${prCommentAccessToken}`
      }
    });
    const jsonResult = await result.json();

    if (!jsonResult.id) {
      throw new _LighthouseCheckError.default(jsonResult.message || 'something went wrong', {
        code: _errorCodes.ERROR_UNEXPECTED_RESPONSE,
        data: jsonResult
      });
    }
  } catch (error) {
    if (verbose) {
      console.log(`${_constants.NAME}:`, error);
    } // we still need to kill the process


    throw error;
  }
};

exports.default = _default;