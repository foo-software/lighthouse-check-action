"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _table = require("table");

var _getLighthouseAuditTitlesByKey = _interopRequireDefault(require("./helpers/getLighthouseAuditTitlesByKey"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// config for the `table` module (for console logging a table)
const tableConfig = {
  border: (0, _table.getBorderCharacters)('ramac')
};

var _default = ({
  isGitHubAction,
  isLocalAudit,
  isOrb,
  results
}) => {
  // header
  const headerTable = [['Lighthouse Audit']];
  const headerTableConfig = { ...tableConfig,
    columns: {
      0: {
        paddingLeft: 29,
        paddingRight: 29
      }
    }
  }; // log the header

  console.log('\n');
  console.log((0, _table.table)(headerTable, headerTableConfig)); // log results

  results.forEach(result => {
    console.log(`URL: ${result.url}`);

    if (result.emulatedFormFactor) {
      console.log(`Device: ${result.emulatedFormFactor}`);
    }

    if (result.report) {
      console.log(`Report: ${result.report}`);
    }

    if (result.localReport) {
      console.log(`Local Report: ${result.localReport}`);
    }

    const tableData = [(0, _getLighthouseAuditTitlesByKey.default)(Object.keys(result.scores)), Object.values(result.scores)];
    console.log('\n');
    console.log((0, _table.table)(tableData, tableConfig));
    console.log('\n');
  }); // if we have a local audit, plug Automated Lighthouse Check

  if (isLocalAudit) {
    let message = 'Not what you expected? Are your scores flaky?'; // depending on how the user is running this module - provide a respective link

    if (isGitHubAction) {
      message += ' GitHub runners could be the cause. Try running on Foo instead\n\n';
      message += 'https://www.foo.software/docs/lighthouse-check-github-action/examples#running-on-foo-and-saving-results';
    } else if (isOrb) {
      message += ' CircleCI runners could be the cause. Try running on Foo instead\n\n';
      message += 'https://github.com/foo-software/lighthouse-check-orb#usage-foo-api';
    } else {
      message += ' Try running on Foo instead\n\n';
      message += 'https://www.foo.software/lighthouse\n' + 'https://github.com/foo-software/lighthouse-check#foos-automated-lighthouse-check-api-usage';
    } // plug


    const plugTable = [[message]];
    const plugTableConfig = { ...tableConfig
    }; // log the plug

    console.log((0, _table.table)(plugTable, plugTableConfig));
    console.log('\n');
  }
};

exports.default = _default;