"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _LighthouseCheckError = _interopRequireDefault(require("./LighthouseCheckError"));

var _constants = require("./constants");

var _errorCodes = require("./errorCodes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getScoreFailMessage = ({
  name,
  url,
  minScore,
  score
}) => {
  // if inputs are not specified - assume we shouldn't fail
  if (typeof minScore === 'undefined' || typeof score === 'undefined') {
    return [];
  }

  if (Number(score) < Number(minScore)) {
    return [`${url}: ${name}: minimum score: ${minScore}, actual score: ${score}`];
  }

  return [];
};

const getFailureMessages = ({
  minAccessibilityScore,
  minBestPracticesScore,
  minPerformanceScore,
  minProgressiveWebAppScore,
  minSeoScore,
  results
}) => results.reduce((accumulator, current) => [...accumulator, ...getScoreFailMessage({
  name: 'Accessibility',
  minScore: minAccessibilityScore,
  score: current.scores.accessibility,
  ...current
}), ...getScoreFailMessage({
  name: 'Best Practices',
  minScore: minBestPracticesScore,
  score: current.scores.bestPractices,
  ...current
}), ...getScoreFailMessage({
  name: 'Performance',
  minScore: minPerformanceScore,
  score: current.scores.performance,
  ...current
}), ...getScoreFailMessage({
  name: 'Progressive Web App',
  minScore: minProgressiveWebAppScore,
  score: current.scores.progressiveWebApp,
  ...current
}), ...getScoreFailMessage({
  name: 'SEO',
  minScore: minSeoScore,
  score: current.scores.seo,
  ...current
})], []);

var _default = async ({
  minAccessibilityScore,
  minBestPracticesScore,
  minPerformanceScore,
  minProgressiveWebAppScore,
  minSeoScore,
  outputDirectory,
  results,
  verbose
}) => {
  let resultsJson = results;

  if (outputDirectory && !resultsJson) {
    const outputDirectoryPath = _path.default.resolve(outputDirectory);

    const resultsJsonFile = `${outputDirectoryPath}/${_constants.NAME_RESULTS_JSON_FILE}`;

    const resultsJsonString = _fs.default.readFileSync(resultsJsonFile).toString();

    resultsJson = JSON.parse(resultsJsonString);
  }

  const failures = getFailureMessages({
    minAccessibilityScore,
    minBestPracticesScore,
    minPerformanceScore,
    minProgressiveWebAppScore,
    minSeoScore,
    results: resultsJson
  }); // if we have scores that were below the minimum requirement

  if (failures.length) {
    // comma-separate error messages and remove the last comma
    const failureMessage = failures.join('\n');
    throw new _LighthouseCheckError.default(`Minimum score requirements failed:\n${failureMessage}`, {
      code: _errorCodes.ERROR_INVALID
    });
  }

  if (verbose) {
    console.log(`${_constants.NAME}:`, 'Scores passed minimum requirement âœ…');
  }

  return true;
};

exports.default = _default;