"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _lighthouse = _interopRequireDefault(require("lighthouse"));

var chromeLauncher = _interopRequireWildcard(require("chrome-launcher"));

var _awsSdk = _interopRequireDefault(require("aws-sdk"));

var _config = _interopRequireDefault(require("./config"));

var _options = _interopRequireDefault(require("./options"));

var _upload = _interopRequireDefault(require("./helpers/upload"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// https://github.com/GoogleChrome/lighthouse/blob/master/docs/readme.md#using-programmatically
var _default = async ({
  awsAccessKeyId: accessKeyId,
  awsBucket: Bucket,
  awsRegion: region,
  awsSecretAccessKey: secretAccessKey,
  config: customConfig,
  options: customOptions,
  outputDirectory,
  url
}) => {
  // will upload to S3?
  const isS3 = !!(accessKeyId && Bucket && region && secretAccessKey); // if a URL, output directory, or S3 creds are missing - we got a problem.

  if (!outputDirectory && !url && !isS3) {
    throw new Error('Missing required params.');
  }

  const options = { ..._options.default,
    ...customOptions
  };
  const chrome = await chromeLauncher.launch({
    chromeFlags: options.chromeFlags,
    port: options.port
  });
  options.output = 'html'; // the default config combined with overriding query params

  const fullConfig = { ..._config.default,
    ...customConfig
  };
  const results = await (0, _lighthouse.default)(url, options, fullConfig); // a remote URL

  let report; // a local file path

  let localReport;

  if (isS3) {
    // upload to S3
    const s3Response = await (0, _upload.default)({
      s3bucket: new _awsSdk.default.S3({
        accessKeyId,
        Bucket,
        region,
        secretAccessKey
      }),
      params: {
        ACL: 'public-read',
        Body: results.report,
        Bucket,
        ContentType: 'text/html',
        Key: `lighthouse-report-${Date.now()}.html`
      }
    });
    report = s3Response.Location;
  }

  if (outputDirectory) {
    localReport = `${outputDirectory}/lighthouse-report-${Date.now()}.html`;

    _fs.default.writeFileSync(localReport, results.report);
  }

  await chrome.kill();
  return {
    localReport,
    result: JSON.parse(JSON.stringify(results.lhr)),
    report
  };
};

exports.default = _default;