"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _lodash = _interopRequireDefault(require("lodash.get"));

var _lighthouse = _interopRequireDefault(require("lighthouse"));

var _reportGenerator = _interopRequireDefault(require("lighthouse/lighthouse-core/report/report-generator"));

var chromeLauncher = _interopRequireWildcard(require("chrome-launcher"));

var _awsSdk = _interopRequireDefault(require("aws-sdk"));

var _config = _interopRequireDefault(require("./config"));

var _options = _interopRequireDefault(require("./options"));

var _upload = _interopRequireDefault(require("./helpers/upload"));

var _getOpportunities = _interopRequireDefault(require("./helpers/getOpportunities"));

var _getPageSpeedInsightsApiResult = _interopRequireDefault(require("./helpers/getPageSpeedInsightsApiResult"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const PROTOCOL_TIMEOUT = 'PROTOCOL_TIMEOUT';

const createTimeout = time => new Promise(resolve => {
  setTimeout(resolve, time, PROTOCOL_TIMEOUT);
}); // https://github.com/GoogleChrome/lighthouse/blob/master/docs/readme.md#using-programmatically


var _default = async ({
  awsAccessKeyId: accessKeyId,
  awsBucket: Bucket,
  awsRegion: region,
  awsSecretAccessKey: secretAccessKey,
  config: customConfig,
  finalScreenshotAwsBucket,
  isExperimental,
  options: customOptions,
  outputDirectory,
  updateReport,
  psiKey,
  timeout,
  url
}) => {
  // will upload to S3?
  const isS3 = !!(accessKeyId && region && secretAccessKey); // if a URL, output directory, or S3 creds are missing - we got a problem.

  if (!outputDirectory && !url && !isS3) {
    throw new Error('Missing required params.');
  } // the default config combined with overriding query params


  const fullConfig = { ..._config.default,
    ...customConfig
  };
  const options = { ..._options.default,
    ...customOptions
  }; // we need to kill chrome if something goes wrong, so we pull it up
  // into the function scope to be accessible in the catch block.

  let chrome;

  try {
    let results;
    let loadingExperience;
    let originLoadingExperience; // this changed in Lighthouse 7, but we should try to support those
    // who don't know about this obscure change.

    const formFactor = fullConfig.settings.formFactor || fullConfig.settings.emulatedFormFactor; // if we're getting results from the PageSpeed Insights API... else
    // run Lighthouse directly

    if (psiKey) {
      const strategy = formFactor === 'desktop' ? 'DESKTOP' : 'MOBILE';
      const psiResults = await (0, _getPageSpeedInsightsApiResult.default)({
        psiKey,
        strategy,
        url
      });

      if (psiResults.error) {
        throw Error(psiResults.error.message);
      }

      results = {
        lhr: psiResults.lighthouseResult,
        report: _reportGenerator.default.generateReportHtml(psiResults.lighthouseResult)
      };

      if (psiResults.loadingExperience) {
        loadingExperience = psiResults.loadingExperience;
      }

      if (psiResults.originLoadingExperience) {
        originLoadingExperience = psiResults.originLoadingExperience;
      }
    } else {
      chrome = await chromeLauncher.launch({
        chromeFlags: options.chromeFlags,
        port: options.port
      });
      options.output = 'html';
      results = !timeout ? await (0, _lighthouse.default)(url, options, fullConfig) : await Promise.race([createTimeout(timeout), (0, _lighthouse.default)(url, options, fullConfig)]);

      if (results === PROTOCOL_TIMEOUT) {
        throw Error(PROTOCOL_TIMEOUT);
      }

      await chrome.kill();
    } // a remote URL


    let report; // a local file path

    let localReport; // the final thumbnail image

    let finalScreenshot;
    const reportContent = !updateReport ? results.report : updateReport(results.report);

    if (isS3) {
      if (Bucket && reportContent) {
        // upload to S3
        const s3Response = await (0, _upload.default)({
          s3bucket: new _awsSdk.default.S3({
            accessKeyId,
            Bucket,
            region,
            secretAccessKey
          }),
          params: {
            ACL: 'public-read',
            Body: reportContent,
            Bucket,
            ContentType: 'text/html',
            Key: `report-${Date.now()}.html`
          }
        });
        report = s3Response.Location;
      }

      if (finalScreenshotAwsBucket) {
        const finalScreenshotData = (0, _lodash.default)(results, `lhr.audits['final-screenshot'].details.data`);

        if (finalScreenshotData) {
          const buffer = Buffer.from(finalScreenshotData.replace('data:image/jpeg;base64,', ''), 'base64');
          const s3Response = await (0, _upload.default)({
            s3bucket: new _awsSdk.default.S3({
              accessKeyId,
              Bucket,
              region,
              secretAccessKey
            }),
            params: {
              ACL: 'public-read',
              Body: buffer,
              Bucket: finalScreenshotAwsBucket,
              ContentEncoding: 'base64',
              ContentType: 'image/jpeg',
              Key: `final-screenshot-${Date.now()}.jpg`
            }
          });
          finalScreenshot = s3Response.Location;
        }
      }
    }

    if (outputDirectory) {
      localReport = `${outputDirectory}/report-${Date.now()}.html`;

      _fs.default.writeFileSync(localReport, reportContent);
    }

    const parsedResult = JSON.parse(JSON.stringify(results.lhr));
    let opportunities = [];

    if (isExperimental && (0, _lodash.default)(parsedResult, 'categories.performance.auditRefs')) {
      try {
        opportunities = (0, _getOpportunities.default)(parsedResult);
      } catch (error) {
        console.error(error);
      }
    }

    return {
      finalScreenshot,
      loadingExperience,
      localReport,
      originLoadingExperience,
      result: parsedResult,
      report,
      // experimental features
      ...(!isExperimental ? {} : {
        opportunities
      })
    };
  } catch (error) {
    // make sure we kill chrome
    if (chrome) {
      await chrome.kill();
    }

    throw error;
  }
};

exports.default = _default;