"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Util", {
  enumerable: true,
  get: function () {
    return _util.Util;
  }
});
exports.default = void 0;

var _util = require("lighthouse/report/renderer/util");

// inspired by:
// https://github.com/GoogleChrome/lighthouse/blob/2e9c3c9b5f7d75b39be9d1e2ba116d49cf811f81/lighthouse-core/report/html/renderer/performance-category-renderer.js#L97
const getWastedMs = audit => {
  if (audit.result.details && audit.result.details.type === 'opportunity') {
    const details = audit.result.details;

    if (typeof details.overallSavingsMs !== 'number') {
      throw new Error('non-opportunity details passed to getWastedMs');
    }

    return details.overallSavingsMs;
  } else {
    return Number.MIN_VALUE;
  }
}; // inspired by:
// https://github.com/GoogleChrome/lighthouse/blob/2e9c3c9b5f7d75b39be9d1e2ba116d49cf811f81/lighthouse-core/report/html/renderer/performance-category-renderer.js#L224-L226


var _default = result => result.categories.performance.auditRefs.reduce((accumulator, audit) => {
  const auditResult = result.audits[audit.id];

  if (audit.group !== 'load-opportunities' || _util.Util.showAsPassed(auditResult)) {
    return accumulator;
  }

  return [...accumulator, { ...audit,
    result: { ...auditResult,
      // "average" | "fail" | "pass" | ...
      rating: _util.Util.calculateRating(auditResult.score, auditResult.scoreDisplayMode)
    }
  }];
}, []).sort((auditA, auditB) => getWastedMs(auditB) - getWastedMs(auditA));

exports.default = _default;