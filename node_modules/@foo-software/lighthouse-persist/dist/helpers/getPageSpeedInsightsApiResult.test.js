"use strict";

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _getPageSpeedInsightsApiResult = _interopRequireDefault(require("./getPageSpeedInsightsApiResult"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('node-fetch');
jest.mock('lighthouse', () => ({
  __esModule: true,
  default: jest.fn().mockReturnValue({
    lighthouseResult: {
      mock: true
    },
    loadingExperience: {
      mock: true
    },
    originLoadingExperience: {
      mock: true
    }
  })
}));
describe('getPageSpeedInsightsApiResult', () => {
  const params = {
    psiKey: 'abc',
    strategy: 'desktop',
    url: 'https://www.foo.software'
  };
  it('should call node-fetch correctly and return data', async () => {
    _nodeFetch.default.mockReturnValue({
      json: () => ({
        mockResult: true
      })
    });

    const response = await (0, _getPageSpeedInsightsApiResult.default)(params);
    expect(_nodeFetch.default).toHaveBeenCalledWith('https://pagespeedonline.googleapis.com/pagespeedonline/v5/runPagespeed?url=https%3A%2F%2Fwww.foo.software&category=ACCESSIBILITY&category=BEST_PRACTICES&category=PERFORMANCE&category=PWA&category=SEO&strategy=desktop&key=abc');
    expect(response).toEqual({
      mockResult: true
    });
  });
});