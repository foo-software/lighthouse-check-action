"use strict";

var _ = _interopRequireWildcard(require("."));

var _getPageSpeedInsightsApiResult = _interopRequireDefault(require("./helpers/getPageSpeedInsightsApiResult"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

jest.mock('./helpers/getPageSpeedInsightsApiResult');
jest.mock('chrome-launcher', () => ({
  launch: jest.fn().mockReturnValue({
    kill: jest.fn()
  })
}));
jest.mock('lighthouse', () => ({
  __esModule: true,
  default: jest.fn().mockReturnValue({
    lhr: {
      categories: {
        performance: {}
      },
      mock: true
    },
    report: '<h1>hello world</h1>'
  })
}));
jest.mock('./helpers/upload', () => ({
  __esModule: true,
  default: jest.fn().mockReturnValue({
    Location: 'https://s3.amazonaws.com/foo-software-html/lighthouse-report-example.html'
  })
}));
describe('@foo-software/lighthouse-persist', () => {
  it('should match snapshot', () => {
    expect(_.default).toMatchSnapshot();
  });
  it('should return an expected response payload', async () => {
    const response = await (0, _.default)({
      url: 'https://www.foo.software',
      awsAccessKeyId: 'abc123',
      awsBucket: 'myBucket',
      awsRegion: 'us-east-1',
      awsSecretAccessKey: 'def456'
    });
    expect(response).toMatchSnapshot();
  });
  it('should return an expected response payload when "psiKey" is provided', async () => {
    _getPageSpeedInsightsApiResult.default.mockReturnValue({
      lighthouseResult: {
        mock: true
      },
      loadingExperience: {
        mock: true
      },
      originLoadingExperience: {
        mock: true
      }
    });

    const response = await (0, _.default)({
      url: 'https://www.foo.software',
      awsAccessKeyId: 'abc123',
      awsBucket: 'myBucket',
      awsRegion: 'us-east-1',
      awsSecretAccessKey: 'def456',
      psiKey: 'abc123'
    });
    expect(response).toMatchSnapshot();
  });
});
describe('ReportGenerator', () => {
  it('generateReportHtml should be a function', () => {
    expect(typeof _.ReportGenerator.generateReportHtml).toBe('function');
  });
});