{"version":3,"file":"errors.js","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":";AAAA,uCAAkE;AAGlE,iCAA+C;AAE/C;;GAEG;AACH,SAAgB,4BAA4B;IAC1C,iCAAyB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IAClD,iCAAyB,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;AACjE,CAAC;AAHD,oEAGC;AAED;;GAEG;AACH,SAAS,aAAa;IACpB,IAAM,iBAAiB,GAAG,4BAAoB,EAAE,CAAC;IACjD,IAAI,iBAAiB,EAAE;QACrB,IAAM,QAAM,GAAmB,gBAAgB,CAAC;QAChD,cAAM,CAAC,GAAG,CAAC,4BAA0B,QAAM,6BAA0B,CAAC,CAAC;QACvE,iBAAiB,CAAC,SAAS,CAAC,QAAM,CAAC,CAAC;KACrC;AACH,CAAC","sourcesContent":["import { addInstrumentationHandler, logger } from '@sentry/utils';\n\nimport { SpanStatusType } from './span';\nimport { getActiveTransaction } from './utils';\n\n/**\n * Configures global error listeners\n */\nexport function registerErrorInstrumentation(): void {\n  addInstrumentationHandler('error', errorCallback);\n  addInstrumentationHandler('unhandledrejection', errorCallback);\n}\n\n/**\n * If an error or unhandled promise occurs, we mark the active transaction as failed\n */\nfunction errorCallback(): void {\n  const activeTransaction = getActiveTransaction();\n  if (activeTransaction) {\n    const status: SpanStatusType = 'internal_error';\n    logger.log(`[Tracing] Transaction: ${status} -> Global error occured`);\n    activeTransaction.setStatus(status);\n  }\n}\n"]}