"use strict";
/**
 * Copyright 2022 Google LLC.
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CDP = exports.Log = exports.BrowsingContext = exports.Message = void 0;
var Message;
(function (Message) {
    class ErrorResponseClass {
        constructor(error, message, stacktrace) {
            this.error = error;
            this.message = message;
            this.stacktrace = stacktrace;
        }
        error;
        message;
        stacktrace;
        toErrorResponse(commandId) {
            return {
                id: commandId,
                error: this.error,
                message: this.message,
                stacktrace: this.stacktrace,
            };
        }
    }
    Message.ErrorResponseClass = ErrorResponseClass;
    class UnknownException extends ErrorResponseClass {
        constructor(message, stacktrace) {
            super('unknown error', message, stacktrace);
        }
    }
    Message.UnknownException = UnknownException;
    class UnknownCommandException extends ErrorResponseClass {
        constructor(message, stacktrace) {
            super('unknown command', message, stacktrace);
        }
    }
    Message.UnknownCommandException = UnknownCommandException;
    class InvalidArgumentException extends ErrorResponseClass {
        constructor(message, stacktrace) {
            super('invalid argument', message, stacktrace);
        }
    }
    Message.InvalidArgumentException = InvalidArgumentException;
    class NoSuchNodeException extends ErrorResponseClass {
        constructor(message, stacktrace) {
            super('no such node', message, stacktrace);
        }
    }
    Message.NoSuchNodeException = NoSuchNodeException;
    class NoSuchFrameException extends ErrorResponseClass {
        constructor(message) {
            super('no such frame', message);
        }
    }
    Message.NoSuchFrameException = NoSuchFrameException;
})(Message = exports.Message || (exports.Message = {}));
// https://w3c.github.io/webdriver-bidi/#module-browsingContext
var BrowsingContext;
(function (BrowsingContext) {
    let EventNames;
    (function (EventNames) {
        EventNames["LoadEvent"] = "browsingContext.load";
        EventNames["DomContentLoadedEvent"] = "browsingContext.domContentLoaded";
        EventNames["ContextCreatedEvent"] = "browsingContext.contextCreated";
        EventNames["ContextDestroyedEvent"] = "browsingContext.contextDestroyed";
    })(EventNames = BrowsingContext.EventNames || (BrowsingContext.EventNames = {}));
    BrowsingContext.AllEvents = 'browsingContext';
})(BrowsingContext = exports.BrowsingContext || (exports.BrowsingContext = {}));
// https://w3c.github.io/webdriver-bidi/#module-log
var Log;
(function (Log) {
    Log.AllEvents = 'log';
    let EventNames;
    (function (EventNames) {
        EventNames["LogEntryAddedEvent"] = "log.entryAdded";
    })(EventNames = Log.EventNames || (Log.EventNames = {}));
})(Log = exports.Log || (exports.Log = {}));
var CDP;
(function (CDP) {
    CDP.AllEvents = 'cdp';
    let EventNames;
    (function (EventNames) {
        EventNames["EventReceivedEvent"] = "cdp.eventReceived";
    })(EventNames = CDP.EventNames || (CDP.EventNames = {}));
})(CDP = exports.CDP || (exports.CDP = {}));
//# sourceMappingURL=protocol.js.map