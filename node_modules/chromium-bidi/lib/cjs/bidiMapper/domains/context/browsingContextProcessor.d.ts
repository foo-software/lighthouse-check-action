/**
 * Copyright 2021 Google LLC.
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { BrowsingContext, CDP, Script } from '../../../protocol/protocol.js';
import { CdpConnection } from '../../CdpConnection.js';
import { LoggerFn } from '../../../utils/log.js';
import { BrowsingContextStorage } from './browsingContextStorage.js';
import { IEventManager } from '../events/EventManager.js';
import { RealmStorage } from '../script/realmStorage.js';
export declare class BrowsingContextProcessor {
    #private;
    constructor(realmStorage: RealmStorage, cdpConnection: CdpConnection, selfTargetId: string, eventManager: IEventManager, browsingContextStorage: BrowsingContextStorage, logger?: LoggerFn);
    process_browsingContext_getTree(params: BrowsingContext.GetTreeParameters): Promise<BrowsingContext.GetTreeResult>;
    process_browsingContext_create(params: BrowsingContext.CreateParameters): Promise<BrowsingContext.CreateResult>;
    process_browsingContext_navigate(params: BrowsingContext.NavigateParameters): Promise<BrowsingContext.NavigateResult>;
    process_script_evaluate(params: Script.EvaluateParameters): Promise<Script.EvaluateResult>;
    process_script_getRealms(params: Script.GetRealmsParameters): Script.GetRealmsResult;
    process_script_callFunction(params: Script.CallFunctionParameters): Promise<Script.CallFunctionResult>;
    process_script_disown(params: Script.DisownParameters): Promise<Script.DisownResult>;
    process_browsingContext_close(commandParams: BrowsingContext.CloseParameters): Promise<BrowsingContext.CloseResult>;
    process_cdp_sendCommand(params: CDP.SendCommandParams): Promise<{
        result: any;
        cdpSession: any;
    }>;
    process_cdp_getSession(params: CDP.GetSessionParams): Promise<{
        result: {
            cdpSession: null;
        };
    } | {
        result: {
            cdpSession: string;
        };
    }>;
}
