/**
 * Copyright 2022 Google LLC.
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { BrowsingContext } from '../../../protocol/protocol.js';
import { LoggerFn } from '../../../utils/log.js';
import { BrowsingContextStorage } from './browsingContextStorage.js';
import { CdpClient } from '../../CdpConnection.js';
import { IEventManager } from '../events/EventManager.js';
import { Realm } from '../script/realm.js';
import { RealmStorage } from '../script/realmStorage.js';
export declare class BrowsingContextImpl {
    #private;
    private constructor();
    static createFrameContext(realmStorage: RealmStorage, contextId: string, parentId: string | null, cdpClient: CdpClient, cdpSessionId: string, eventManager: IEventManager, browsingContextStorage: BrowsingContextStorage, logger?: LoggerFn): Promise<void>;
    static createTargetContext(realmStorage: RealmStorage, contextId: string, parentId: string | null, cdpClient: CdpClient, cdpSessionId: string, cdpBrowserContextId: string | null, eventManager: IEventManager, browsingContextStorage: BrowsingContextStorage, logger?: LoggerFn): Promise<void>;
    get cdpBrowserContextId(): string | null;
    get navigableId(): string | null;
    convertFrameToTargetContext(cdpClient: CdpClient, cdpSessionId: string): void;
    delete(): Promise<void>;
    get contextId(): string;
    get parentId(): string | null;
    get cdpSessionId(): string;
    get children(): BrowsingContextImpl[];
    get url(): string;
    addChild(child: BrowsingContextImpl): void;
    awaitLoaded(): Promise<void>;
    awaitUnblocked(): Promise<void>;
    serializeToBidiValue(maxDepth?: number, addParentFiled?: boolean): BrowsingContext.Info;
    navigate(url: string, wait: BrowsingContext.ReadinessState): Promise<BrowsingContext.NavigateResult>;
    getOrCreateSandbox(sandbox: string | undefined): Promise<Realm>;
}
