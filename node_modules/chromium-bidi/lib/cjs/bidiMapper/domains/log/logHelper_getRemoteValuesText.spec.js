"use strict";
/**
 * Copyright 2022 Google LLC.
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai = __importStar(require("chai"));
const logHelper_js_1 = require("./logHelper.js");
const expect = chai.expect;
describe('test getRemoteValuesText', () => {
    it('single line input test', () => {
        const inputArgs = [{ type: 'string', value: 'line 1' }];
        const outputString = 'line 1';
        expect((0, logHelper_js_1.getRemoteValuesText)(inputArgs, false)).to.equal(outputString);
    });
    it('multiple line input test', () => {
        const inputArgs = [
            { type: 'string', value: 'line 1' },
            { type: 'string', value: 'line 2' },
        ];
        const outputString = 'line 1\u0020line 2';
        expect((0, logHelper_js_1.getRemoteValuesText)(inputArgs, false)).to.equal(outputString);
    });
    it('no input test', () => {
        const inputArgs = [];
        const outputString = '';
        expect((0, logHelper_js_1.getRemoteValuesText)(inputArgs, false)).to.equal(outputString);
    });
});
//# sourceMappingURL=logHelper_getRemoteValuesText.spec.js.map