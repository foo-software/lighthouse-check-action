{"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/error-message.js","../src/parser/error.js","../src/plugins/estree.js","../src/tokenizer/context.js","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.js","../src/util/scopeflags.js","../src/util/scope.js","../src/plugins/flow/scope.js","../src/plugins/flow/index.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/plugins/typescript/scope.js","../src/util/production-parameter.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/util/class-scope.js","../src/util/expression-scope.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  decimal: new TokenType(\"decimal\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: new TokenType(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: new TokenType(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: new TokenType(\"#{\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: new TokenType(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(\n    node: Node,\n    elements: (Node | null)[],\n    // When the current node is followed by a token which hasn't a respective AST node, we\n    // need to take all the trailing comments to prevent them from being attached to an\n    // unrelated node. e.g. in\n    //     var { x } /* cmt */ = { y }\n    // we don't want /* cmt */ to be attached to { y }.\n    // On the other hand, in\n    //     fn(x) [new line] /* cmt */ [new line] y\n    // /* cmt */ is both a trailing comment of fn(x) and a leading comment of y\n    takeAllComments?: boolean,\n  ) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (\n        this.state.leadingComments[j].end < this.state.commentPreviousNode.end\n      ) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        // Perf: we don't need to splice if we are going to reset the array anyway\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n        node.trailingComments.push(leadingComment);\n      }\n    }\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Adjust comments that follow a trailing comma on the last element in a\n    // comma separated list of nodes to be the trailing comments on the last\n    // element\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (\n      this.state.commentPreviousNode &&\n      ((this.state.commentPreviousNode.type === \"ImportSpecifier\" &&\n        node.type !== \"ImportSpecifier\") ||\n        (this.state.commentPreviousNode.type === \"ExportSpecifier\" &&\n          node.type !== \"ExportSpecifier\"))\n    ) {\n      this.adjustCommentsAfterTrailingComma(node, [\n        this.state.commentPreviousNode,\n      ]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        // TrailingComments maybe contain innerComments\n        const firstTrailingCommentIndex = trailingComments.findIndex(\n          comment => comment.end >= node.end,\n        );\n\n        if (firstTrailingCommentIndex > 0) {\n          node.innerComments = trailingComments.slice(\n            0,\n            firstTrailingCommentIndex,\n          );\n          node.trailingComments = trailingComments.slice(\n            firstTrailingCommentIndex,\n          );\n        } else {\n          node.trailingComments = trailingComments;\n        }\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = Object.freeze({\n  AccessorIsGenerator: \"A %0ter cannot be a generator\",\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block\",\n  AwaitExpressionFormalParameter:\n    \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter:\n    \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport:\n    \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ExportBindingIsString:\n    \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'\",\n  ForInOfLoopInitializer:\n    \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportBindingIsString:\n    'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly %0\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral\",\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDecimal: \"Invalid decimal\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values\",\n  ModuleAttributesWithDuplicateKeys:\n    'Duplicate key \"%0\" is not allowed in module attributes',\n  ModuleExportNameHasLoneSurrogate:\n    \"An export name cannot include a lone surrogate, found '\\\\u%0'\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar:\n    \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline:\n    \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateInExpectedIn:\n    \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`)\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed:\n    \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  TrailingDecorator: \"Decorators must be attached to a class element\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField:\n    \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%0'\",\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties\",\n  UnsupportedSuper:\n    \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0\",\n});\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n};\n\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport { ErrorMessages as Errors } from \"./error-message\";\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(pos: number, errorTemplate: string, ...params: any): Error | empty {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    pos: number,\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ loc, pos }, message);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    estreeParseRegExpLiteral({ pattern, flags }: N.RegExpLiteral): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    estreeParseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral(value: any): N.Node {\n      return this.parseLiteral(value, \"Literal\");\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const directive = super.stmtToDirective(stmt);\n      const value = stmt.expression.value;\n\n      // Record the expression value as in estree mode we want\n      // the stmt to have the real value e.g. (\"use strict\") and\n      // not the raw value e.g. (\"use\\\\x20strict\")\n      this.addExtra(directive.value, \"expressionValue\", value);\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      switch (this.state.type) {\n        case tt.num:\n        case tt.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case tt.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case tt.bigint:\n          return this.estreeParseBigIntLiteral(this.state.value);\n\n        case tt.decimal:\n          return this.estreeParseDecimalLiteral(this.state.value);\n\n        case tt._null:\n          return this.estreeParseLiteral(null);\n\n        case tt._true:\n          return this.estreeParseLiteral(true);\n\n        case tt._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    parseMaybePrivateName(...args: [boolean]): any {\n      const node = super.parseMaybePrivateName(...args);\n      if (\n        node.type === \"PrivateName\" &&\n        this.getPluginOption(\"estree\", \"classFeatures\")\n      ) {\n        return this.convertPrivateNameToPrivateIdentifier(node);\n      }\n      return node;\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Literal>(\n      value: any,\n      type: /*T[\"kind\"]*/ string,\n      startPos?: number,\n      startLoc?: Position,\n    ): T {\n      const node = super.parseLiteral(value, type, startPos, startLoc);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n        propertyNode.type = \"PropertyDefinition\";\n        propertyNode.computed = false;\n      }\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        this.toAssignable(node.value, isLHS);\n\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n  };\n","// @flow\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport { types as tt } from \"./types\";\n\nexport class TokContext {\n  constructor(\n    token: string,\n    isExpr?: boolean,\n    preserveSpace?: boolean,\n    override?: ?Function, // Takes a Tokenizer as a this-parameter, and returns void.\n  ) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n  token: string;\n  isExpr: boolean;\n  preserveSpace: boolean;\n  override: ?Function;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  recordExpression: new TokContext(\"#{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false),\n};\n\n// Token-specific context update code\n// Note that we should avoid accessing `this.prodParam` in context update,\n// because it is executed immediately when last token is consumed, which may be\n// before `this.prodParam` is updated. e.g.\n// ```\n// function *g() { () => yield / 2 }\n// ```\n// When `=>` is eaten, the context update of `yield` is executed, however,\n// `this.prodParam` still has `[Yield]` production because it is not yet updated\n\ntt.parenR.updateContext = tt.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntt.name.updateContext = function (prevType) {\n  let allowed = false;\n  if (prevType !== tt.dot) {\n    if (\n      this.state.value === \"of\" &&\n      !this.state.exprAllowed &&\n      prevType !== tt._function &&\n      prevType !== tt._class\n    ) {\n      allowed = true;\n    }\n  }\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntt.braceL.updateContext = function (prevType) {\n  this.state.context.push(\n    this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function () {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function (prevType) {\n  const statementParens =\n    prevType === tt._if ||\n    prevType === tt._for ||\n    prevType === tt._with ||\n    prevType === tt._while;\n  this.state.context.push(\n    statementParens ? types.parenStatement : types.parenExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\ntt._function.updateContext = tt._class.updateContext = function (prevType) {\n  if (\n    prevType.beforeExpr &&\n    prevType !== tt.semi &&\n    prevType !== tt._else &&\n    !(prevType === tt._return && this.hasPrecedingLineBreak()) &&\n    !(\n      (prevType === tt.colon || prevType === tt.braceL) &&\n      this.curContext() === types.b_stat\n    )\n  ) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function () {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n  this.state.exprAllowed = false;\n};\n\n// we don't need to update context for tt.braceBarL because we do not pop context for tt.braceBarR\ntt.braceHashL.updateContext = function () {\n  this.state.context.push(types.recordExpression);\n  this.state.exprAllowed = true; /* tt.braceHashL.beforeExpr */\n};\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,107,20,28,22,13,52,76,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8952,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42717,35,4148,12,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (const char of Array.from(name)) {\n    const cp = char.codePointAt(0);\n    if (isFirst) {\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n      isFirst = false;\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlags;\n  // A list of var-declared names in the current lexical scope\n  var: string[] = [];\n  // A list of lexically-declared names in the current lexical scope\n  lexical: string[] = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: string[] = [];\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n  get inStaticBlock() {\n    return (this.currentThisScope().flags & SCOPE_STATIC_BLOCK) > 0;\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        scope.functions.indexOf(name) > -1 ||\n        scope.var.indexOf(name) > -1\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        (!this.treatFunctionsAsVarInScope(scope) &&\n          scope.var.indexOf(name) > -1)\n      );\n    }\n\n    return (\n      (scope.lexical.indexOf(name) > -1 &&\n        !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name)) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        scope.functions.indexOf(name) > -1)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1 &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      this.scopeStack[0].functions.indexOf(id.name) === -1\n    ) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (\n        (scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) &&\n        !(scope.flags & SCOPE_ARROW)\n      ) {\n        return scope;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: string[] = [];\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.includes(name) &&\n        (scope.lexical.includes(name) || scope.functions.includes(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (this.scopeStack[0].declareFunctions.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport { types as tt, type TokenType } from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart, isKeyword } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors } from \"../../parser/error\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized:\n    \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName:\n    \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues:\n    \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType:\n    \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied:\n    \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType:\n    \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType:\n    \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType:\n    \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName:\n    \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized:\n    \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized:\n    \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`\",\n  UnsupportedDeclareExportKind:\n    \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: State): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(tt.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (\n        moduloLoc.line !== checksLoc.line ||\n        moduloLoc.column !== checksLoc.column - 1\n      ) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              node.value.this.start,\n              FlowErrors.ThisParamBannedInConstructor,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.value.this.start,\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n        );\n      }\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(\n      params: N.FlowFunctionTypeParam[] = [],\n    ): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            node.this = tmp._this;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start,\n        startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      while (this.match(tt.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(tt.bracketL);\n        this.expect(tt.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      // Ensure that a brace after a function generic type annotation is a\n      // statement, except in arrow functions (noAnonFunctionType)\n      this.state.exprAllowed =\n        this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const lookahead = this.lookahead();\n        if (lookahead.type === tt.name || isKeyword(lookahead.value)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only use the expensive \"tryParse\" method if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() =>\n          super.parseConditional(expr, startPos, startLoc),\n        );\n\n        if (!result.node) {\n          // $FlowIgnore\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(\"declare\")) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\": {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type === \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          });\n        }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // determine whether a parameter is a this param\n    isThisParam(param) {\n      return param.type === \"Identifier\" && param.name === \"this\";\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n        } else if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n        }\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\") && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamNoDefault);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseModuleExportName();\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        if (firstIdent.type === \"StringLiteral\") {\n          throw this.raise(\n            specifier.start,\n            Errors.ImportBindingIsString,\n            firstIdent.value,\n          );\n        }\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          firstIdentLoc,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () =>\n            super.parseMaybeAssign(\n              refExpressionErrors,\n              afterLeftParse,\n              refNeedsArrowPos,\n            ),\n          state,\n        );\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === tc.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (jsx?.error || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n                refNeedsArrowPos,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {}: any);\n          if (\n            arrowExpression.type !== \"ArrowFunctionExpression\" &&\n            arrowExpression.extra?.parenthesized\n          ) {\n            abort();\n          }\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                typeParameters.start,\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      );\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral();\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (\n        this.match(tt.name) &&\n        this.state.value === \"of\" &&\n        prevType === tt.name &&\n        this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) ===\n          \"interface\"\n      ) {\n        this.state.exprAllowed = false;\n      } else {\n        super.updateContext(prevType);\n      }\n    }\n\n    // check if the next token is a tt.relation(\"<\")\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n/* eslint-disable sort-keys */\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\", false);\ntc.j_cTag = new TokContext(\"</tag\", false);\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = function () {\n  this.state.context.push(tc.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(tc.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntt.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n  if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === tc.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(\n                this.state.pos,\n                `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n              );\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              expression.expressions[1].start,\n              JsxErrors.UnexpectedSequenceExpression,\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (this.match(tt.braceL)) {\n        const curContext = this.curContext();\n        if (curContext === tc.j_oTag) {\n          this.state.context.push(tc.braceExpression);\n        } else if (curContext === tc.j_expr) {\n          this.state.context.push(tc.templateQuasi);\n        } else {\n          super.updateContext(prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(tt.slash) && prevType === tt.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(tc.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: string[] = [];\n\n  // enums (which are also in .types)\n  enums: string[] = [];\n\n  // const enums (which are also in .enums and .types)\n  constEnums: string[] = [];\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: string[] = [];\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: string[] = [];\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.push(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].types.indexOf(id.name) === -1 &&\n      this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors } from \"../../parser/error\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = Object.freeze({\n  AbstractMethodHasImplementation:\n    \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'\",\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility:\n    \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility:\n    \"Private elements cannot have an accessibility modifier ('%0')\",\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind:\n    \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\",\n});\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.hash) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: string,\n    ): void {\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n          } else {\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(\n            startPos,\n            // $FlowIgnore\n            errorTemplate,\n            modifier,\n          );\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeParameters);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma)) {\n        this.semicolon();\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        if (readonly) {\n          this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\"],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(\n            elementNode.start,\n            TSErrors.MixedLabeledAndUnlabeledElements,\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return this.isContextual(\"abstract\") && this.lookahead().type === tt._new;\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript interface declaration\",\n        BIND_TS_INTERFACE,\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(\"intrinsic\") &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInDeclareContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(\"enum\");\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt.name: {\n            const value = this.state.value;\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, /* next */ true);\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || this.match(tt.name))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (this.match(tt.name)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminator(next) && this.match(tt.name)) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeArguments);\n      }\n      // This reads the next token after the `>` too, so do this in the enclosing context.\n      // But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false\n      this.state.exprAllowed = false;\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      if (allowModifiers !== undefined) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n        if (allowModifiers === false && (accessibility || readonly)) {\n          this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isDeclareContext) {\n        this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(\n            node.typeAnnotation.start,\n            TSErrors.UnexpectedTypeAnnotation,\n          );\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = false;\n              }\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (this.match(tt.name) || this.match(tt.star) || this.match(tt.braceL)) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(\"type\") &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          !(ahead.type === tt.name && ahead.value === \"from\") &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (this.match(tt.name) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          \"A type-only import can specify a default import or named bindings, but not both.\",\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(\"type\") &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (this.isContextual(\"type\") && this.lookahead().type === tt.braceL) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      this.tsParseModifiers(member, [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n      ]);\n\n      const callParseClassMember = () => {\n        super.parseClassMember(classBody, member, state);\n      };\n      if (member.declare) {\n        this.tsInDeclareContext(callParseClassMember);\n      } else {\n        callParseClassMember();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if (isStatic) {\n          this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!refNeedsArrowPos || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refNeedsArrowPos,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        // $FlowIgnore\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      if (\n        isDeclare &&\n        (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          this.state.start,\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n        );\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isDeclareContext && this.match(tt.eq)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!jsx?.error && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          (expr.extra && expr.extra.parenthesized)\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isDeclareContext &&\n          !this.state.inType\n        ) {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      if (this.match(tt.relational)) {\n        const code = this.input.charCodeAt(this.state.start);\n        if (code === charCodes.lessThan || code === charCodes.greaterThan) {\n          this.state.pos -= 1;\n          this.readToken_lt_gt(code);\n        }\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam =\n        firstParam &&\n        firstParam.type === \"Identifier\" &&\n        firstParam.name === \"this\";\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInDeclareContext<T>(cb: () => T): T {\n      const oldIsDeclareContext = this.state.isDeclareContext;\n      this.state.isDeclareContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isDeclareContext = oldIsDeclareContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(\"interface\")) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(\n            node.start,\n            TSErrors.NonClassMethodPropertyHasAbstractModifer,\n          );\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            method.start,\n            TSErrors.AbstractMethodHasImplementation,\n            key.type === \"Identifier\"\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(\"let\")) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, \"A class name is required\");\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tt.placeholder.label,\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (hasPlugin(plugins, \"importAssertions\")) {\n      throw new Error(\n        \"Cannot combine importAssertions and moduleAttributes plugins.\",\n      );\n    }\n    const moduleAttributesVerionPluginOption = getPluginOption(\n      plugins,\n      \"moduleAttributes\",\n      \"version\",\n    );\n    if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n      throw new Error(\n        \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n          \" representing the last proposal update. Currently, the\" +\n          \" only supported value is 'may-2020'.\",\n      );\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> = Object.keys(\n  mixinPlugins,\n);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { types as tt, type TokenType } from \"./types\";\nimport type { ParsingError } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isIterator: boolean = false;\n  isDeclareContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store.\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  trailingComments: Array<N.Comment> = [];\n  leadingComments: Array<N.Comment> = [];\n  commentStack: Array<{\n    start: number,\n    leadingComments: ?Array<N.Comment>,\n    trailingComments: ?Array<N.Comment>,\n    type: string,\n  }> = [];\n  // $FlowIgnore this is initialized when the parser starts.\n  commentPreviousNode: N.Node = null;\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  context: Array<TokContext> = [ct.braceStatement];\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, string> = new Map();\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  exportedIdentifiers: Array<string> = [];\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport ParserErrors, { Errors } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreak,\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (pos?: ?number, messageOrType?: string | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  // TODO\n\n  lookahead(): State {\n    const old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore: The skipWhiteSpace ensures to match any string\n    return pos + skip[0].length;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach((message, pos) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(pos, message),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext?.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    const override = curContext?.override;\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(\n    block: boolean,\n    text: string,\n    start: number,\n    end: number,\n    startLoc: Position,\n    endLoc: Position,\n  ): void {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc),\n    };\n\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment(): void {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      true,\n      this.input.slice(start + 2, end),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  skipLineComment(startSkip: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      false,\n      this.input.slice(start + startSkip, this.state.pos),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk:\n              this.skipBlockComment();\n              break;\n\n            case charCodes.slash:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n      }\n\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n      this.state.pos += 2;\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    // '/'\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !exprAllowed) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n\n        this.finishOp(tt.bracketBarR, 2);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (\n        next === charCodes.dash &&\n        !this.inModule &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan &&\n        (this.state.lastTokEnd === 0 || this.hasPrecedingLineBreak())\n      ) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (\n      next === charCodes.exclamationMark &&\n      code === charCodes.lessThan &&\n      !this.inModule &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dash &&\n      this.input.charCodeAt(this.state.pos + 3) === charCodes.dash\n    ) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.finishToken(tt.bracketBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.finishToken(tt.braceBarL);\n          this.state.pos += 2;\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.pos;\n    let escaped, inClass;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (\n        isIdentifierChar(charCode) ||\n        charCode === charCodes.backslash\n      ) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(start, Errors.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, Errors.StrictOctalLiteral);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(start, Errors.InvalidOrMissingExponent);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, Errors.InvalidDecimal);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos: number, message: string) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            this.state.pos - 1,\n            Errors.StrictNumericEscape,\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, Errors.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  readWord1(): string {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === charCodes.atSign) {\n        ++this.state.pos;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word: string): boolean {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(): void {\n    const word = this.readWord1();\n    const type = keywordTypes.get(word) || tt.name;\n\n    // Allow @@iterator and @@asyncIterator as a identifier only inside type\n    if (\n      this.state.isIterator &&\n      (!this.isIterator(word) || !this.state.inType)\n    ) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType: TokenType): boolean {\n    const parent = this.curContext();\n    if (parent === ct.functionExpression || parent === ct.functionStatement) {\n      return true;\n    }\n    if (\n      prevType === tt.colon &&\n      (parent === ct.braceStatement || parent === ct.braceExpression)\n    ) {\n      return !parent.isExpr;\n    }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (\n      prevType === tt._return ||\n      (prevType === tt.name && this.state.exprAllowed)\n    ) {\n      return this.hasPrecedingLineBreak();\n    }\n\n    if (\n      prevType === tt._else ||\n      prevType === tt.semi ||\n      prevType === tt.eof ||\n      prevType === tt.parenR ||\n      prevType === tt.arrow\n    ) {\n      return true;\n    }\n\n    if (prevType === tt.braceL) {\n      return parent === ct.braceStatement;\n    }\n\n    if (\n      prevType === tt._var ||\n      prevType === tt._const ||\n      prevType === tt.name\n    ) {\n      return false;\n    }\n\n    if (prevType === tt.relational) {\n      // `class C<T> { ... }`\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType: TokenType): void {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === tt.dot || prevType === tt.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if ((update = type.updateContext)) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\ntype raiseFunction = (number, string, ...any) => void;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, /* message */ string> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(pos: number, message: string) {\n    this.errors.set(pos, message);\n  }\n  clearDeclarationError(pos: number) {\n    this.errors.delete(pos);\n  }\n  iterateErrors(iterator: (message: string, pos: number) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {string} message Error message\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(pos: number, message: string): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, message);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(pos, message);\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {string} message\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(pos: number, message: string): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, message);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(pos, message);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {string} message\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(pos: number, message: string): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, message);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors((message, pos) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(pos, message);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors } from \"./error\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    return (\n      this.input.slice(nameStart, nameEnd) === name &&\n      (nameEnd === this.input.length ||\n        !isIdentifierChar(this.input.charCodeAt(nameEnd)))\n    );\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, message?: string): void {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.end, this.nextTokenStart()),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(this.state.lastTokEnd, Errors.MissingSemicolon);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, message);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: string | TokenType = \"Unexpected token\",\n  ): empty {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, SyntaxError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: SyntaxError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return (\n      this.match(tt.name) ||\n      !!this.state.type.keyword ||\n      this.match(tt.string) ||\n      this.match(tt.num) ||\n      this.match(tt.bigint) ||\n      this.match(tt.decimal)\n    );\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/proposal-class-fields/#sec-private-names-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.state.exportedIdentifiers;\n    this.state.exportedIdentifiers = [];\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.state.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track\n * - **shorthandAssign**: track initializer `=` position when parsing ambiguous\n *   patterns. When we are sure the parsed pattern is a RHS, which means it is\n *   not a pattern, we will throw on this position on invalid assign syntax,\n *   otherwise it will be reset to -1\n * - **doubleProto**: track the duplicate `__proto__` key position when parsing\n *   ambiguous object patterns. When we are sure the parsed pattern is a RHS,\n *   which means it is an object literal, we will throw on this position for\n *   __proto__ redefinition, otherwise it will be reset to -1\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method in flow.js.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            node.start,\n            Errors.InvalidParenthesizedAssignment,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport { types as ct } from \"../tokenizer/context\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n} from \"../util/identifier\";\nimport type { Pos, Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  PARAM,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors } from \"./error\";\n\n/*::\nimport type { SourceType } from \"../options\";\n*/\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      ),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      ),\n    );\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        // If we have [Yield] production, `yield` will start a YieldExpression thus\n        // regex is allowed following. Otherwise `yield` is an identifier and regex\n        // is disallowed in tt.name.updateContext\n        this.state.exprAllowed = true;\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(\n      refExpressionErrors,\n      refNeedsArrowPos,\n    );\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    refExpressionErrors: ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // FIXME: Disabling this for now since can't seem to get it to play nicely\n    // eslint-disable-next-line no-unused-vars\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    let prec = this.state.type.binop;\n    if (prec != null && (this.prodParam.hasIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = ((tt.logicalAND: any): { binop: number }).binop;\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n    );\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(\n        node.argument.start,\n        Errors.UnexpectedTokenUnaryExponentiation,\n      );\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    if (\n      this.isContextual(\"module\") &&\n      this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n      !this.hasFollowingLineBreak()\n    ) {\n      return this.parseModuleExpression();\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? this.state.type.startsExpr\n        : this.state.type.startsExpr && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(\n          startPos,\n          this.hasPlugin(\"topLevelAwait\")\n            ? Errors.AwaitNotInAsyncContext\n            : Errors.AwaitNotInAsyncFunction,\n        );\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n    if (this.match(tt.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else if (optional || this.match(tt.bracketL) || this.eat(tt.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(tt.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const property = computed\n      ? this.parseExpression()\n      : this.parseMaybePrivateName(true);\n\n    if (this.isPrivateName(property)) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, Errors.SuperPrivateField);\n      }\n      this.classScope.usePrivateName(\n        this.getPrivateNameSV(property),\n        property.start,\n      );\n    }\n    node.property = property;\n\n    if (computed) {\n      this.expect(tt.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        state.maybeAsyncArrow,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n      );\n    }\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        // todo(Babel 8): remove the if condition,\n        // moduleAttributes is renamed to importAssertions\n        if (!this.hasPlugin(\"moduleAttributes\")) {\n          this.expectPlugin(\"importAssertions\");\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    possibleAsyncArrow: boolean,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          false,\n          possibleAsyncArrow ? new ExpressionErrors() : undefined,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.state.type === tt.slash) this.readRegexp();\n\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n          if (this.match(tt._function)) {\n            const last = this.state.context.length - 1;\n            if (this.state.context[last] !== ct.functionStatement) {\n              // Since \"async\" is an identifier and normally identifiers\n              // can't be followed by expression, the tokenizer assumes\n              // that \"function\" starts a statement.\n              // Fixing it in the tokenizer would mean tracking not only the\n              // previous token (\"async\"), but also the one before to know\n              // its beforeExpr value.\n              // It's easier and more efficient to adjust the context here.\n              throw new Error(\"Internal error\");\n            }\n            this.state.context[last] = ct.functionExpression;\n\n            this.next();\n            return this.parseFunction(\n              this.startNodeAtNode(id),\n              undefined,\n              true,\n            );\n          } else if (this.match(tt.name)) {\n            return this.parseAsyncArrowUnaryFunction(id);\n          }\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          return this.parseArrowExpression(\n            this.startNodeAtNode(id),\n            [id],\n            false,\n          );\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        return this.parseDo();\n      }\n\n      case tt.regexp: {\n        const value = this.state.value;\n        node = this.parseLiteral(value.value, \"RegExpLiteral\");\n        node.pattern = value.pattern;\n        node.flags = value.flags;\n        return node;\n      }\n\n      case tt.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case tt.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case tt.decimal:\n        return this.parseLiteral(this.state.value, \"DecimalLiteral\");\n\n      case tt.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case tt._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case tt._true:\n      case tt._false:\n        return this.parseBooleanLiteral();\n\n      case tt.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n          }\n\n          this.next();\n\n          if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n          }\n\n          this.registerTopicReference();\n          return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n        }\n\n        // https://tc39.es/proposal-private-fields-in-in\n        // RelationalExpression [In, Yield, Await]\n        //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n        const nextCh = this.input.codePointAt(this.state.end);\n        if (isIdentifierStart(nextCh) || nextCh === charCodes.backslash) {\n          const start = this.state.start;\n          // $FlowIgnore It'll either parse a PrivateName or throw.\n          node = (this.parseMaybePrivateName(true): N.PrivateName);\n          if (this.match(tt._in)) {\n            this.expectPlugin(\"privateIn\");\n            this.classScope.usePrivateName(\n              this.getPrivateNameSV(node),\n              node.start,\n            );\n          } else if (this.hasPlugin(\"privateIn\")) {\n            this.raise(\n              this.state.start,\n              Errors.PrivateInExpectedIn,\n              this.getPrivateNameSV(node),\n            );\n          } else {\n            throw this.unexpected(start);\n          }\n          return node;\n        }\n      }\n      // fall through\n      case tt.relational: {\n        if (this.state.value === \"<\") {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (\n            isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n            lookaheadCh === charCodes.greaterThan // Fragment <>\n          ) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          }\n        }\n      }\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(id: N.Expression): N.ArrowFunctionExpression {\n    const node = this.startNodeAtNode(id);\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, Errors.LineTerminatorBeforeArrow);\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  parseDo(): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    const node = this.startNode();\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    node.body = this.parseBlock();\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.SuperNotAllowed);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.UnexpectedSuper);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(node.start, Errors.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseBooleanLiteral(): N.BooleanLiteral {\n    const node = this.startNode();\n    node.value = this.match(tt._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raiseWithData(\n          id.start,\n          { code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" },\n          Errors.ImportMetaOutsideModule,\n        );\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral<T: N.Literal>(\n    value: any,\n    type: /*T[\"kind\"]*/ string,\n    startPos?: number,\n    startLoc?: Position,\n  ): T {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = { start: 0 };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma, refNeedsArrowPos.start || null);\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n            refNeedsArrowPos,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = Errors.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(metaProp.start, error);\n        /* eslint-enable @babel/development-internal/dry-error-messages */\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    // The tokenizer uses `braceIsBlock` to detect whether `{` starts a block statement.\n    // If `{` is a block statement, `exprAllowed` will be `true`.\n    // However the tokenizer can not handle edge cases like `0 ? a : { a : 1 } / 2`, here\n    // we update `exprAllowed` when an object-like is parsed.\n    this.state.exprAllowed = false;\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (\n      !isPattern &&\n      !isGenerator &&\n      !containsEsc &&\n      this.maybeAsyncOrAccessorProp(prop)\n    ) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, Errors.AccessorIsGenerator, keyName);\n          this.next();\n        }\n        this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoveredInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      (prop: $FlowFixMe).key =\n        this.match(tt.num) ||\n        this.match(tt.string) ||\n        this.match(tt.bigint) ||\n        this.match(tt.decimal)\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (!this.isPrivateName(prop.key)) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody and AsyncConciseBody inherit [In]\n    if (!this.match(tt.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    refNeedsArrowPos: ?Pos,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors, refNeedsArrowPos),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n        refNeedsArrowPos,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { start, type } = this.state;\n\n    if (type === tt.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n\n      // `class` and `function` keywords push function-type token context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed\n      // as an identifier such as a property name.\n      const curContext = this.curContext();\n      if (\n        (type === tt._class || type === tt._function) &&\n        (curContext === ct.functionStatement ||\n          curContext === ct.functionExpression)\n      ) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(\n          startLoc,\n          Errors.AwaitBindingIdentifier,\n        );\n      }\n    }\n\n    if (\n      this.scope.inClass &&\n      !this.scope.inNonArrowFunction &&\n      word === \"arguments\"\n    ) {\n      this.raise(startLoc, Errors.ArgumentsInClass);\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    return (\n      this.hasPrecedingLineBreak() ||\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      this.match(tt.plusMin) ||\n      this.match(tt.parenL) ||\n      this.match(tt.bracketL) ||\n      this.match(tt.backQuote) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      this.match(tt.regexp) ||\n      this.match(tt.slash) ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    if (\n      this.match(tt.semi) ||\n      (!this.match(tt.star) && !this.state.type.startsExpr) ||\n      this.hasPrecedingLineBreak()\n    ) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign();\n    }\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, startPos);\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    const isSimpleReference = this.isSimpleReference(childExpression);\n    if (isSimpleReference) {\n      bodyNode.callee = childExpression;\n    } else {\n      if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n        this.raise(startPos, Errors.PipelineTopicUnused);\n      }\n      bodyNode.expression = childExpression;\n    }\n    return this.finishNode(\n      bodyNode,\n      isSimpleReference ? \"PipelineBareFunction\" : \"PipelineTopicExpression\",\n    );\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"./error\";\nimport {\n  isIdentifierChar,\n  isIdentifierStart,\n  keywordRelationalOperator,\n} from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = this.tokens;\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const expr = stmt.expression;\n\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n\n    directive.value = this.finishNodeAt(\n      directiveLiteral,\n      \"DirectiveLiteral\",\n      expr.end,\n      expr.loc.end,\n    );\n\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === charCodes.leftSquareBracket) return true;\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(\n        node.start,\n        {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n        },\n        Errors.ImportOutsideModule,\n      );\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    if (this.match(tt._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init, /* isLHS */ true);\n      const description = this.isContextual(\"of\")\n        ? \"for-of statement\"\n        : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              this.state.lastTokEnd,\n              Errors.DeclarationMissingInitializer,\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    constructorAllowsSuper: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      constructorAllowsSuper,\n      hadConstructor: false,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parseClassElementName(method);\n\n      if (this.isPrivateName(method.key)) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassElementName(member);\n    const isPrivate = this.isPrivateName(key);\n    // Check the key is not a computed expression or string literal.\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isSimple &&\n      key.name === \"async\" &&\n      !containsEsc &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (this.isPrivateName(method.key)) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isSimple &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !containsEsc &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      this.parseClassElementName(publicMethod);\n\n      if (this.isPrivateName(method.key)) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const key = this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n\n    if (\n      !member.computed &&\n      member.static &&\n      ((key: $FlowSubtype<N.Identifier>).name === \"prototype\" ||\n        (key: $FlowSubtype<N.StringLiteral>).value === \"prototype\")\n    ) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (\n      this.isPrivateName(key) &&\n      this.getPrivateNameSV(key) === \"constructor\"\n    ) {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(member.start, Errors.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    if (!node.typeAnnotation || this.match(tt.eq)) {\n      this.expectPlugin(\"classProperties\");\n    }\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  // https://tc39.es/proposal-class-fields/#prod-Initializer\n  parseInitializer(node: N.ClassProperty | N.ClassPrivateProperty): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      const value = this.state.value;\n      if ((value === \"async\" && !this.state.containsEsc) || value === \"let\") {\n        return false;\n      }\n      if (\n        (value === \"type\" || value === \"interface\") &&\n        !this.state.containsEsc\n      ) {\n        const l = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (l.type === tt.name && l.value !== \"from\") ||\n          l.type === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (this.match(tt.name) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type === \"StringLiteral\") {\n              this.raise(\n                specifier.start,\n                Errors.ExportBindingIsString,\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseModuleExportName()\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      this.expectPlugin(\"moduleStringNames\");\n      const result = this.parseLiteral<N.StringLiteral>(\n        this.state.value,\n        \"StringLiteral\",\n      );\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          result.start,\n          Errors.ModuleExportNameHasLoneSurrogate,\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    }\n    // todo(Babel 8): remove module attributes support\n    else {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      if (this.match(tt.string)) {\n        node.key = this.parseLiteral<N.StringLiteral>(keyName, \"StringLiteral\");\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      // for now we are only allowing `type` as the only allowed module attribute\n      if (keyName !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          keyName,\n        );\n      }\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseLiteral<N.StringLiteral>(\n        this.state.value,\n        \"StringLiteral\",\n      );\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseLiteral(this.state.value, \"StringLiteral\");\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    specifier.imported = this.parseModuleExportName();\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (imported.type === \"StringLiteral\") {\n        throw this.raise(\n          specifier.start,\n          Errors.ImportBindingIsString,\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = imported.__clone();\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","decimal","regexp","string","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","firstTrailingCommentIndex","findIndex","ErrorMessages","Object","freeze","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","errorTemplate","params","raiseWithData","raiseOverwrite","message","replace","_","errorRecovery","errors","error","_raise","data","errorContext","err","SyntaxError","isLookahead","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","value","bigInt","BigInt","String","estreeParseDecimalLiteral","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","parenthesized","stmtToDirective","addExtra","parseBlockBody","args","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","refExpressionErrors","tt","parseMaybePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","toAssignable","isLHS","toAssignableObjectExpressionProp","key","Errors","finishCallExpression","optional","callee","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","isExpr","preserveSpace","override","braceStatement","braceExpression","recordExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","isIterator","braceIsBlock","statementParens","hasPrecedingLineBreak","b_stat","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","isIteratorStart","current","next","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","indexOf","checkLocalExport","FlowScope","declareFunctions","FlowScopeHandler","includes","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","getScopeHandler","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","bodyNode","parseImport","hasModuleExport","forEach","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","refNeedsArrowPos","result","tryParse","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","toAssignableList","trailingComma","checkParams","parse","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","getTokenFromCode","charCodeAt","finishOp","readWord","isBinding","element","operator","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","parseArrayLike","close","canBePattern","isTuple","maybeInArrowParameters","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","tc","j_oTag","j_expr","abort","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","aborted","async","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","add","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","nextTokenStart","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidTupleMemberLabel","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","TypeAnnotationAfterAssign","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","tsIsIdentifier","tsNextTokenCanFollowModifier","isLiteralPropertyName","tsParseModifier","allowedModifiers","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","containsEsc","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","prodParam","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","tsInDeclareContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","hasFollowingLineBreak","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","parseAccessModifier","elt","pp","parameter","bodilessType","isDeclareContext","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","parseStatementContent","callParseClassMember","parseClassMemberWithIsStatic","inAbstractClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","typeCast","ct","toAssignableParenthesizedExpression","parseMaybeDecoratorArguments","readToken_lt_gt","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsDeclareContext","oldInAbstractClass","hasBody","placeholder","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","expectPlugin","isUnparsedContextual","startsWith","nextTokenStartSince","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","identifier","some","Array","isArray","option","PIPELINE_PROPOSALS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","join","moduleAttributesVerionPluginOption","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","State","potentialArrowAt","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","strictErrors","exportedIdentifiers","tokensLength","curPosition","skipArrays","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","ParserErrors","pushToken","checkKeywordEscapes","old","curr","skip","setStrict","clear","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","octal","n","readWord1","escStart","identifierCheck","esc","keywordTypes","parent","update","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","from","declarePrivateName","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","UtilParser","op","nameStart","nameEnd","allowAsi","messageOrType","missingPlugin","expectOnePlugin","names","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","initializeScopes","oldLabels","oldExportedIdentifiers","oldInModule","oldScope","oldProdParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","checkClashes","disallowLetBinding","strictModeChanged","elem","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","getExpression","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","parseModuleExpression","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","parseSuper","parseImportMetaProperty","parseFunction","parseAsyncArrowUnaryFunction","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","nextCh","lookaheadCh","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","oldInPropertyName","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegate","childExpression","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","topicReferenceWasUsedInCurrentTopicContext","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","StatementParser","interpreter","parseInterpreterDirective","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","constructorAllowsSuper","hadConstructor","parseClassStaticBlock","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}