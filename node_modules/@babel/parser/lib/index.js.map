{"version":3,"file":"index.js","sources":["../src/tokenizer/types.js","../src/util/scopeflags.js","../src/util/whitespace.js","../src/util/location.js","../src/parser/base.js","../src/parser/comments.js","../src/parser/location.js","../src/plugins/estree.js","../src/tokenizer/context.js","../src/util/identifier.js","../src/plugins/flow.js","../src/plugins/jsx/xhtml.js","../src/plugins/jsx/index.js","../src/util/scope.js","../src/plugins/typescript/scope.js","../src/util/production-parameter.js","../src/plugins/typescript/index.js","../src/plugins/placeholders.js","../src/plugins/v8intrinsic.js","../src/plugin-utils.js","../src/options.js","../src/tokenizer/state.js","../src/tokenizer/index.js","../src/parser/util.js","../src/parser/node.js","../src/parser/lval.js","../src/parser/expression.js","../src/parser/statement.js","../src/util/class-scope.js","../src/parser/index.js","../src/index.js"],"sourcesContent":["// @flow\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\nexport class TokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  updateContext: ?(prevType: TokenType) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n}\n\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return new TokenType(name, { beforeExpr, binop });\n}\n\nexport const types: { [name: string]: TokenType } = {\n  num: new TokenType(\"num\", { startsExpr }),\n  bigint: new TokenType(\"bigint\", { startsExpr }),\n  regexp: new TokenType(\"regexp\", { startsExpr }),\n  string: new TokenType(\"string\", { startsExpr }),\n  name: new TokenType(\"name\", { startsExpr }),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr, startsExpr }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: new TokenType(\"{|\", { beforeExpr, startsExpr }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", { beforeExpr, startsExpr }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", { beforeExpr }),\n  semi: new TokenType(\";\", { beforeExpr }),\n  colon: new TokenType(\":\", { beforeExpr }),\n  doubleColon: new TokenType(\"::\", { beforeExpr }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", { beforeExpr }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", { beforeExpr }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", { beforeExpr }),\n  backQuote: new TokenType(\"`\", { startsExpr }),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr, startsExpr }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: new TokenType(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr, isAssign }),\n  assign: new TokenType(\"_=\", { beforeExpr, isAssign }),\n  incDec: new TokenType(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: new TokenType(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: new TokenType(\"~\", { beforeExpr, prefix, startsExpr }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: new TokenType(\"%\", { beforeExpr, binop: 10, startsExpr }),\n  star: createBinop(\"*\", 10),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", { isLoop }),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", { isLoop }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n};\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b00000000,\n             SCOPE_PROGRAM      = 0b00000001,\n             SCOPE_FUNCTION     = 0b00000010,\n             SCOPE_ARROW        = 0b00000100,\n             SCOPE_SIMPLE_CATCH = 0b00001000,\n             SCOPE_SUPER        = 0b00010000,\n             SCOPE_DIRECT_SUPER = 0b00100000,\n             SCOPE_CLASS        = 0b01000000,\n             SCOPE_TS_MODULE    = 0b10000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE           = 0b00000_0000_01,\n             BIND_KIND_TYPE            = 0b00000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR            = 0b00000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL        = 0b00000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION       = 0b00000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE        = 0b00000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE           = 0b00001_0000_00,\n             BIND_FLAGS_CLASS          = 0b00010_0000_00,\n             BIND_FLAGS_TS_ENUM        = 0b00100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM  = 0b01000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY = 0b10000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  options: Options;\n  inModule: boolean;\n  scope: ScopeHandler<*>;\n  classScope: ClassScopeHandler;\n  prodParam: ProductionParameterHandler;\n  plugins: PluginsMap;\n  filename: ?string;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  input: string;\n  length: number;\n\n  hasPlugin(name: string): boolean {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    // $FlowIssue\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n}\n","// @flow\n\n/**\n * Based on the comment attachment algorithm used in espree and estraverse.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * * Redistributions of source code must retain the above copyright\n *   notice, this list of conditions and the following disclaimer.\n * * Redistributions in binary form must reproduce the above copyright\n *   notice, this list of conditions and the following disclaimer in the\n *   documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\n\nfunction last<T>(stack: $ReadOnlyArray<T>): T {\n  return stack[stack.length - 1];\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(\n    node: Node,\n    elements: (Node | null)[],\n    // When the current node is followed by a token which hasn't a respective AST node, we\n    // need to take all the trailing comments to prevent them from being attached to an\n    // unrelated node. e.g. in\n    //     var { x } /* cmt */ = { y }\n    // we don't want /* cmt */ to be attached to { y }.\n    // On the other hand, in\n    //     fn(x) [new line] /* cmt */ [new line] y\n    // /* cmt */ is both a trailing comment of fn(x) and a leading comment of y\n    takeAllComments?: boolean,\n  ) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (\n        this.state.leadingComments[j].end < this.state.commentPreviousNode.end\n      ) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        // Perf: we don't need to splice if we are going to reset the array anyway\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n        node.trailingComments.push(leadingComment);\n      }\n    }\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node: Node): void {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n\n    const stack = this.state.commentStack;\n\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      // If the first comment in trailingComments comes after the\n      // current node, then we're good - all comments in the array will\n      // come after the node and so it's safe to add them as official\n      // trailingComments.\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        // Otherwise, if the first comment doesn't come after the\n        // current node, that means we have a mix of leading and trailing\n        // comments in the array and that leadingComments contains the\n        // same items as trailingComments. Reset trailingComments to\n        // zero items and we'll handle this by evaluating leadingComments\n        // later.\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n      if (\n        lastInStack.trailingComments &&\n        lastInStack.trailingComments[0].start >= node.end\n      ) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    // Eating the stack.\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    // Adjust comments that follow a trailing comma on the last element in a\n    // comma separated list of nodes to be the trailing comments on the last\n    // element\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (\n      this.state.commentPreviousNode &&\n      ((this.state.commentPreviousNode.type === \"ImportSpecifier\" &&\n        node.type !== \"ImportSpecifier\") ||\n        (this.state.commentPreviousNode.type === \"ExportSpecifier\" &&\n          node.type !== \"ExportSpecifier\"))\n    ) {\n      this.adjustCommentsAfterTrailingComma(node, [\n        this.state.commentPreviousNode,\n      ]);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (\n          lastChild !== node &&\n          lastChild.leadingComments.length > 0 &&\n          last(lastChild.leadingComments).end <= node.start\n        ) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          // A leading comment for an anonymous class had been stolen by its first ClassMethod,\n          // so this takes back the leading comment.\n          // See also: https://github.com/eslint/espree/issues/158\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (\n              this.state.leadingComments[j].end <\n              this.state.commentPreviousNode.end\n            ) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        // https://github.com/eslint/espree/issues/2\n        //\n        // In special cases, such as return (without a value) and\n        // debugger, all comments will end up as leadingComments and\n        // will otherwise be eliminated. This step runs when the\n        // commentStack is empty and there are comments left\n        // in leadingComments.\n        //\n        // This loop figures out the stopping point between the actual\n        // leading and trailing comments by finding the location of the\n        // first comment that comes after the given node.\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        // Split the array based on the location of the first comment\n        // that comes after the node. Keep in mind that this could\n        // result in an empty array, and if so, the array must be\n        // deleted.\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        // Similarly, trailing comments are attached later. The variable\n        // must be reset to null if there are no trailing comments.\n        trailingComments = this.state.leadingComments.slice(i);\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (\n        trailingComments.length &&\n        trailingComments[0].start >= node.start &&\n        last(trailingComments).end <= node.end\n      ) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  }\n}\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n};\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const Errors = Object.freeze({\n  ArgumentsDisallowedInInitializer:\n    \"'arguments' is not allowed in class field initializer\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function\",\n  AwaitExpressionFormalParameter:\n    \"await is not allowed in async function parameters\",\n  AwaitNotInAsyncFunction:\n    \"Can not use keyword 'await' outside an async function\",\n  BadGetterArity: \"getter must not have any formal parameters\",\n  BadSetterArity: \"setter must have exactly one formal parameter\",\n  BadSetterRestParameter:\n    \"setter function argument must not be a rest parameter\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'\",\n  // todo: rephrase to get/set accessor\n  ConstructorIsAccessor: \"Constructor can't have get/set modifier\",\n  ConstructorIsAsync: \"Constructor can't be an async function\",\n  ConstructorIsGenerator: \"Constructor can't be a generator\",\n  DeclarationMissingInitializer: \"%0 require an initialization value\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon\",\n  DeletePrivateField: \"Deleting a private field is not allowed\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport:\n    \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag\",\n  ElementAfterRest: \"Rest element must be last element\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape\",\n  ForInOfLoopInitializer:\n    \"%0 loop variable declaration may not have an initializer\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block\",\n  IllegalBreakContinue: \"Unsyntactic %0\",\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list\",\n  IllegalReturn: \"'return' outside of function\",\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments\",\n  ImportCallArity: \"import() requires exactly one argument\",\n  ImportCallArityLtOne: \"Dynamic imports require a parameter: import('a.js')\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...)\",\n  ImportCallSpreadArgument: \"... is not allowed in import()\",\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  InvalidCodePoint: \"Code point out of bounds\",\n  InvalidDigit: \"Expected number in radix %0\",\n  InvalidEscapeSequence: \"Bad character escape sequence\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0\",\n  InvalidIdentifier: \"Invalid identifier %0\",\n  InvalidLhs: \"Invalid left-hand side in %0\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0\",\n  InvalidNumber: \"Invalid number\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined\",\n  InvalidPropertyBindingPattern: \"Binding member expression\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument\",\n  LabelRedeclaration: \"Label '%0' is already declared\",\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag\",\n  MissingClassName: \"A class name is required\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators\",\n  ModuleExportUndefined: \"Export '%0' is not defined\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses\",\n  NewlineAfterThrow: \"Illegal newline after throw\",\n  NoCatchOrFinally: \"Missing catch or finally clause\",\n  NumberIdentifier: \"Identifier directly after number\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\",\n  ObsoleteAwaitStar:\n    \"await* has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"constructors in/after an Optional Chain are not allowed\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain\",\n  ParamDupe: \"Argument name clash\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter\",\n  PatternHasMethod: \"Object pattern can't contain methods\",\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding\",\n  PrimaryTopicRequiresSmartPipeline:\n    \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement\",\n  StaticPrototype: \"Classes may not have static property named prototype\",\n  StrictDelete: \"Deleting local variable in strict mode\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode\",\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block\",\n  StrictOctalLiteral: \"Octal literal in strict mode\",\n  StrictWith: \"'with' in strict mode\",\n  SuperNotAllowed:\n    \"super() is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super\",\n  //todo: rephrase this error message as it is too subjective\n  TrailingDecorator: \"You have trailing decorators with no method\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'\",\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context\",\n  UnexpectedNewTarget: \"new.target can only be used in functions\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits\",\n  UnexpectedPrivateField:\n    \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'\",\n  UnexpectedSuper: \"super is only allowed in object methods and classes\",\n  UnexpectedToken: \"Unexpected token '%'\",\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  //todo: rephrase this error message as it is too subjective\n  UnsupportedDecoratorExport:\n    \"You can only use decorators on an export when exporting a class\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"import can only be used in import() or import.meta\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1\",\n  //todo: remove Stage 2 as we are likely to forget updating when it progressed\n  UnsupportedParameterDecorator:\n    \"Stage 2 decorators cannot be used to decorate parameters\",\n  UnsupportedPropertyDecorator:\n    \"Stage 2 decorators disallow object literal property decorators\",\n  UnsupportedSuper:\n    \"super can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop])\",\n  UnterminatedComment: \"Unterminated comment\",\n  UnterminatedRegExp: \"Unterminated regular expression\",\n  UnterminatedString: \"Unterminated string constant\",\n  UnterminatedTemplate: \"Unterminated template\",\n  VarRedeclaration: \"Identifier '%0' has already been declared\",\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator\",\n  YieldInParameter: \"yield is not allowed in generator parameters\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0\",\n});\n\nexport default class LocationParser extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(pos: number, errorTemplate: string, ...params: any): Error | empty {\n    return this.raiseWithData(pos, undefined, errorTemplate, ...params);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { Errors } from \"../parser/location\";\n\nfunction isSimpleProperty(node: N.Node): boolean {\n  return (\n    node != null &&\n    node.type === \"Property\" &&\n    node.kind === \"init\" &&\n    node.method === false\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    estreeParseRegExpLiteral({ pattern, flags }: N.RegExpLiteral): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    estreeParseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      // $FlowIgnore\n      const bigInt = typeof BigInt !== \"undefined\" ? BigInt(value) : null;\n      const node = this.estreeParseLiteral(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral(value: any): N.Node {\n      return this.parseLiteral(value, \"Literal\");\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.value;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (isSimpleProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      const prop = ((method: any): N.EstreeProperty | N.EstreeMethodDefinition);\n      const paramCount = prop.kind === \"get\" ? 0 : 1;\n      const start = prop.start;\n      if (prop.value.params.length !== paramCount) {\n        if (method.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      } else if (\n        prop.kind === \"set\" &&\n        prop.value.params[0].type === \"RestElement\"\n      ) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n      disallowLetBinding?: boolean,\n    ): void {\n      switch (expr.type) {\n        case \"ObjectPattern\":\n          expr.properties.forEach(prop => {\n            this.checkLVal(\n              prop.type === \"Property\" ? prop.value : prop,\n              bindingType,\n              checkClashes,\n              \"object destructuring pattern\",\n              disallowLetBinding,\n            );\n          });\n          break;\n        default:\n          super.checkLVal(\n            expr,\n            bindingType,\n            checkClashes,\n            contextDescription,\n            disallowLetBinding,\n          );\n      }\n    }\n\n    checkDuplicatedProto(\n      prop: N.ObjectMember | N.SpreadElement,\n      protoRef: { used: boolean },\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if (\n        prop.type === \"SpreadElement\" ||\n        prop.computed ||\n        prop.method ||\n        // $FlowIgnore\n        prop.shorthand\n      ) {\n        return;\n      }\n\n      const key = prop.key;\n      // It is either an Identifier or a String/NumericLiteral\n      const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n      if (name === \"__proto__\" && prop.kind === \"init\") {\n        // Store the first redefinition's position\n        if (protoRef.used) {\n          if (refExpressionErrors && refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          } else {\n            this.raise(key.start, Errors.DuplicateProto);\n          }\n        }\n\n        protoRef.used = true;\n      }\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        (!stmt.expression.extra || !stmt.expression.extra.parenthesized)\n      );\n    }\n\n    stmtToDirective(stmt: N.Statement): N.Directive {\n      const directive = super.stmtToDirective(stmt);\n      const value = stmt.expression.value;\n\n      // Reset value to the actual value as in estree mode we want\n      // the stmt to have the real value and not the raw value\n      directive.value.value = value;\n\n      return directive;\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: ?boolean,\n      topLevel: boolean,\n      end: TokenType,\n    ): void {\n      super.parseBlockBody(node, allowDirectives, topLevel, end);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      switch (this.state.type) {\n        case tt.num:\n        case tt.string:\n          return this.estreeParseLiteral(this.state.value);\n\n        case tt.regexp:\n          return this.estreeParseRegExpLiteral(this.state.value);\n\n        case tt.bigint:\n          return this.estreeParseBigIntLiteral(this.state.value);\n\n        case tt._null:\n          return this.estreeParseLiteral(null);\n\n        case tt._true:\n          return this.estreeParseLiteral(true);\n\n        case tt._false:\n          return this.estreeParseLiteral(false);\n\n        default:\n          return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    parseLiteral<T: N.Literal>(\n      value: any,\n      type: /*T[\"kind\"]*/ string,\n      startPos?: number,\n      startLoc?: Position,\n    ): T {\n      const node = super.parseLiteral(value, type, startPos, startLoc);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n\n      type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n      return this.finishNode(node, type);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      containsEsc: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (isSimpleProperty(node)) {\n        this.toAssignable(node.value);\n\n        return node;\n      }\n\n      return super.toAssignable(node);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, isLast: boolean) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        throw this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        throw this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        delete node.arguments;\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedListDeep(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): void {\n      // ImportExpressions do not have an arguments array.\n      if (!exprList) {\n        return;\n      }\n\n      super.toReferencedListDeep(exprList, isParenthesizedExpr);\n    }\n  };\n","// @flow\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nimport { types as tt } from \"./types\";\nimport { lineBreak } from \"../util/whitespace\";\n\nexport class TokContext {\n  constructor(\n    token: string,\n    isExpr?: boolean,\n    preserveSpace?: boolean,\n    override?: ?Function, // Takes a Tokenizer as a this-parameter, and returns void.\n  ) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n  token: string;\n  isExpr: boolean;\n  preserveSpace: boolean;\n  override: ?Function;\n}\n\nexport const types: {\n  [key: string]: TokContext,\n} = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false),\n};\n\n// Token-specific context update code\n\ntt.parenR.updateContext = tt.braceR.updateContext = function() {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n  if (out === types.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntt.name.updateContext = function(prevType) {\n  let allowed = false;\n  if (prevType !== tt.dot) {\n    if (\n      (this.state.value === \"of\" && !this.state.exprAllowed) ||\n      (this.state.value === \"yield\" && this.prodParam.hasYield)\n    ) {\n      allowed = true;\n    }\n  }\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntt.braceL.updateContext = function(prevType) {\n  this.state.context.push(\n    this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.dollarBraceL.updateContext = function() {\n  this.state.context.push(types.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntt.parenL.updateContext = function(prevType) {\n  const statementParens =\n    prevType === tt._if ||\n    prevType === tt._for ||\n    prevType === tt._with ||\n    prevType === tt._while;\n  this.state.context.push(\n    statementParens ? types.parenStatement : types.parenExpression,\n  );\n  this.state.exprAllowed = true;\n};\n\ntt.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntt._function.updateContext = tt._class.updateContext = function(prevType) {\n  if (\n    prevType.beforeExpr &&\n    prevType !== tt.semi &&\n    prevType !== tt._else &&\n    !(\n      prevType === tt._return &&\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) &&\n    !(\n      (prevType === tt.colon || prevType === tt.braceL) &&\n      this.curContext() === types.b_stat\n    )\n  ) {\n    this.state.context.push(types.functionExpression);\n  } else {\n    this.state.context.push(types.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntt.backQuote.updateContext = function() {\n  if (this.curContext() === types.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types.template);\n  }\n  this.state.exprAllowed = false;\n};\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { keywords } from \"../tokenizer/types\";\n\nconst reservedWords = {\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\n\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport const isReservedWord = (word: string, inModule: boolean): boolean => {\n  return (inModule && word === \"await\") || word === \"enum\";\n};\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 0x80.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,155,22,13,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,0,33,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,230,43,117,63,32,0,161,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,754,9486,286,50,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,2357,44,11,6,17,0,370,43,1301,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,232,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1014,0,2,54,8,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,419,13,1495,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: $ReadOnlyArray<number>): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type Parser from \"../parser\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport type { Options } from \"../options\";\nimport type { Pos, Position } from \"../util/location\";\nimport type State from \"../tokenizer/state\";\nimport { types as tc } from \"../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../util/identifier\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport { Errors } from \"../parser/location\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = Object.freeze({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module\",\n  AssignReservedType: \"Cannot overwrite reserved type %0\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement\",\n  EnumBooleanMemberNotInitialized:\n    \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName:\n    \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues:\n    \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType:\n    \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied:\n    \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType:\n    \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType:\n    \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType:\n    \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName:\n    \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized:\n    \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized:\n    \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment\",\n  OptionalBindingPattern:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SpreadVariance: \"Spread properties cannot have variance\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object\",\n  UnexpectedReservedType: \"Unexpected reserved type %0\",\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new\",\n  //todo: replace ´ by `\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between ´%´ and ´checks´ are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\"',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration\",\n  UnsupportedDeclareExportKind:\n    \"`declare export %0` is not supported. Use `%1` instead\",\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module\",\n  UnterminatedFlowComment: \"Unterminated flow-comment\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state: State): boolean {\n  return (\n    (state.type === tt.name || !!state.type.keyword) && state.value !== \"from\"\n  );\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\";\n\n    constructor(options: ?Options, input: string) {\n      super(options, input);\n      this.flowPragma = undefined;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      const moduloPos = this.state.start;\n      this.expect(tt.modulo);\n      const checksLoc = this.state.startLoc;\n      this.expectContextual(\"checks\");\n      // Force '%' and 'checks' to be adjacent\n      if (\n        moduloLoc.line !== checksLoc.line ||\n        moduloLoc.column !== checksLoc.column - 1\n      ) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.isRelational(\"<\")) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(\"module\")) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(\"type\")) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(\"opaque\")) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(\"interface\")) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(\"type\") && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            \"declare\",\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(\"type\") || this.isContextual(\"interface\")) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(\"opaque\") // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(\"interface\") || // declare export interface ...\n          this.isContextual(\"type\") || // declare export type ...\n          this.isContextual(\"opaque\") // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(\"exports\");\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"mixins\")) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(\"type\");\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      } while (!this.isRelational(\">\"));\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseType());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expectRelational(\"<\");\n      while (!this.isRelational(\">\")) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.isRelational(\">\")) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expectRelational(\">\");\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(\"interface\");\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam();\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(\"proto\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(\"static\")) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n            const lookahead = this.lookahead();\n            if (\n              lookahead.type === tt.name ||\n              lookahead.type === tt.string ||\n              lookahead.type === tt.num\n            ) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in objec types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.isRelational(\"<\") || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        name = this.parseIdentifier();\n        if (this.eat(tt.question)) {\n          optional = true;\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(\n      params: N.FlowFunctionTypeParam[] = [],\n    ): { params: N.FlowFunctionTypeParam[], rest: ?N.FlowFunctionTypeParam } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam());\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam();\n      }\n      return { params, rest };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.name:\n          if (this.isContextual(\"interface\")) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(\n            startPos,\n            startLoc,\n            node,\n            this.parseIdentifier(),\n          );\n\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.relational:\n          if (this.state.value === \"<\") {\n            node.typeParameters = this.flowParseTypeParameterDeclaration();\n            this.expect(tt.parenL);\n            tmp = this.flowParseFunctionTypeParams();\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            this.expect(tt.parenR);\n\n            this.expect(tt.arrow);\n\n            node.returnType = this.flowParseType();\n\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n          }\n          break;\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (this.match(tt.name)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteral(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node.start,\n                node.loc.start,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        default:\n          if (this.state.type.keyword === \"typeof\") {\n            return this.flowParseTypeofType();\n          } else if (this.state.type.keyword) {\n            const label = this.state.type.label;\n            this.next();\n            return super.createIdentifier(node, label);\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start,\n        startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      while (this.match(tt.bracketL) && !this.canInsertSemicolon()) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.elementType = type;\n        this.expect(tt.bracketL);\n        this.expect(tt.bracketR);\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      // Ensure that a brace after a function generic type annotation is a\n      // statement, except in arrow functions (noAnonFunctionType)\n      this.state.exprAllowed =\n        this.state.exprAllowed || this.state.noAnonFunctionType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (\n        this.state.strict &&\n        this.match(tt.name) &&\n        this.state.value === \"interface\"\n      ) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      } else {\n        const stmt = super.parseStatement(context, topLevel);\n        // We will parse a flow pragma in any comment before the first statement.\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n        return stmt;\n      }\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            this.match(tt.name) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (this.match(tt.name)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      return (\n        this.isContextual(\"type\") ||\n        this.isContextual(\"interface\") ||\n        this.isContextual(\"opaque\") ||\n        (this.shouldParseEnums() && this.isContextual(\"enum\")) ||\n        super.shouldParseExportDeclaration()\n      );\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (\n        this.match(tt.name) &&\n        (this.state.value === \"type\" ||\n          this.state.value === \"interface\" ||\n          this.state.value === \"opaque\" ||\n          (this.shouldParseEnums() && this.state.value === \"enum\"))\n      ) {\n        return false;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      // only use the expensive \"tryParse\" method if there is a question mark\n      // and if we come from inside parens\n      if (refNeedsArrowPos) {\n        const result = this.tryParse(() =>\n          super.parseConditional(expr, noIn, startPos, startLoc),\n        );\n\n        if (!result.node) {\n          // $FlowIgnore\n          refNeedsArrowPos.start = result.error.pos || this.state.start;\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(noIn, undefined, undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssign();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(\"type\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers();\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(\"opaque\")) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(\"interface\")) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(\"type\") && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(tt.relational, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.isIterator = true;\n        return super.readWord();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          return true;\n\n        case \"ObjectExpression\": {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type === \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          });\n        }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(element => this.isAssignable(element));\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n        case \"TypeCastExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node));\n      } else {\n        return super.toAssignable(node);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr && expr.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          (!expr.extra || !expr.extra.parenthesized) &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(\n          expr,\n          bindingType,\n          checkClashes,\n          contextDescription,\n        );\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.isRelational(\"<\")) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(\"implements\")) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.isRelational(\"<\")) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    parsePropertyName(\n      node: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n      isPrivateNameAllowed: boolean,\n    ): N.Identifier {\n      const variance = this.flowParseVariance();\n      const key = super.parsePropertyName(node, isPrivateNameAllowed);\n      // $FlowIgnore (\"variance\" not defined on TsNamedTypeElementBase)\n      node.variance = variance;\n      return key;\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n      containsEsc: boolean,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.isRelational(\"<\")) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        refExpressionErrors,\n        containsEsc,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.OptionalBindingPattern);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        contextDescription,\n      );\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(\"type\")) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n\n        // import type * is not allowed\n        if (kind === \"type\" && lh.type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(lh) ||\n          lh.type === tt.braceL ||\n          lh.type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(node: N.ImportDeclaration): void {\n      const specifier = this.startNode();\n      const firstIdentLoc = this.state.start;\n      const firstIdent = this.parseIdentifier(true);\n\n      let specifierTypeKind = null;\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n\n      let isBinding = false;\n      if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !this.match(tt.name) &&\n          !this.state.type.keyword\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = as_ident.__clone();\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else if (\n        specifierTypeKind !== null &&\n        (this.match(tt.name) || this.state.type.keyword)\n      ) {\n        // `import {type foo`\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n        if (this.eatContextual(\"as\")) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = specifier.imported.__clone();\n        }\n      } else {\n        isBinding = true;\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = specifier.imported.__clone();\n      }\n\n      const nodeIsTypeImport = hasTypeImportKind(node);\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (nodeIsTypeImport && specifierIsTypeImport) {\n        this.raise(\n          firstIdentLoc,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (nodeIsTypeImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(\n        specifier.local,\n        BIND_LEXICAL,\n        undefined,\n        \"import specifier\",\n      );\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      noIn?: ?boolean,\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.isRelational(\"<\"))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () =>\n            super.parseMaybeAssign(\n              noIn,\n              refExpressionErrors,\n              afterLeftParse,\n              refNeedsArrowPos,\n            ),\n          state,\n        );\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === tc.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === tc.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if ((jsx && jsx.error) || this.isRelational(\"<\")) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(() => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () =>\n              super.parseMaybeAssign(\n                noIn,\n                refExpressionErrors,\n                afterLeftParse,\n                refNeedsArrowPos,\n              ),\n          );\n          arrowExpression.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(arrowExpression, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        const arrowExpression: ?N.ArrowFunctionExpression =\n          arrow.node && arrow.node.type === \"ArrowFunctionExpression\"\n            ? arrow.node\n            : null;\n\n        if (!arrow.error && arrowExpression) return arrowExpression;\n\n        // If we are here, both JSX and Flow parsing attemps failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx && jsx.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx && jsx.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(\n        noIn,\n        refExpressionErrors,\n        afterLeftParse,\n        refNeedsArrowPos,\n      );\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.isRelational(\"<\")\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadRelational(\"<\")) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (\n        !noCalls &&\n        this.shouldParseTypes() &&\n        this.isRelational(\"<\")\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral();\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      booleanMembers: Array<N.Node>,\n      numberMembers: Array<N.Node>,\n      stringMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      while (!this.match(tt.braceR)) {\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return members;\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(\"of\")) {\n        if (!this.match(tt.name)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const members = this.flowEnumMembers({ enumName, explicitType });\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { TokenType, types as tt } from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors } from \"../../parser/location\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\nconst JsxErrors = Object.freeze({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>\",\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text\",\n  UnterminatedJsxContent: \"Unterminated JSX contents\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n// Be aware that this file is always executed and not only when the plugin is enabled.\n// Therefore this contexts and tokens do always exist.\ntc.j_oTag = new TokContext(\"<tag\", false);\ntc.j_cTag = new TokContext(\"</tag\", false);\ntc.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\n\ntt.jsxName = new TokenType(\"jsxName\");\ntt.jsxText = new TokenType(\"jsxText\", { beforeExpr: true });\ntt.jsxTagStart = new TokenType(\"jsxTagStart\", { startsExpr: true });\ntt.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntt.jsxTagStart.updateContext = function() {\n  this.state.context.push(tc.j_expr); // treat as beginning of JSX expression\n  this.state.context.push(tc.j_oTag); // start opening tag context\n  this.state.exprAllowed = false;\n};\n\ntt.jsxTagEnd.updateContext = function(prevType) {\n  const out = this.state.context.pop();\n  if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === tc.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.exprAllowed) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (this.state.type.keyword) {\n        node.name = this.state.type.keyword;\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.next();\n          node = this.jsxParseExpressionContainer(node);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        node.expression = this.parseExpression();\n      }\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.isRelational(\"<\")) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.isRelational(\"<\") &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.finishToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    getTokenFromCode(code: number): void {\n      if (this.state.inPropertyName) return super.getTokenFromCode(code);\n\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.exprAllowed &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      if (this.match(tt.braceL)) {\n        const curContext = this.curContext();\n        if (curContext === tc.j_oTag) {\n          this.state.context.push(tc.braceExpression);\n        } else if (curContext === tc.j_expr) {\n          this.state.context.push(tc.templateQuasi);\n        } else {\n          super.updateContext(prevType);\n        }\n        this.state.exprAllowed = true;\n      } else if (this.match(tt.slash) && prevType === tt.jsxTagStart) {\n        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.state.context.push(tc.j_cTag); // reconsider as closing tag context\n        this.state.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors } from \"../parser/location\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  flags: ScopeFlags;\n  // A list of var-declared names in the current lexical scope\n  var: string[] = [];\n  // A list of lexically-declared names in the current lexical scope\n  lexical: string[] = [];\n  // A list of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: string[] = [];\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  raise: raiseFunction;\n  inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScope().flags & SCOPE_CLASS) > 0;\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        scope.functions.indexOf(name) > -1 ||\n        scope.var.indexOf(name) > -1\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.indexOf(name) > -1 ||\n        (!this.treatFunctionsAsVarInScope(scope) &&\n          scope.var.indexOf(name) > -1)\n      );\n    }\n\n    return (\n      (scope.lexical.indexOf(name) > -1 &&\n        !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name)) ||\n      (!this.treatFunctionsAsVarInScope(scope) &&\n        scope.functions.indexOf(name) > -1)\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].lexical.indexOf(id.name) === -1 &&\n      this.scopeStack[0].var.indexOf(id.name) === -1 &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      this.scopeStack[0].functions.indexOf(id.name) === -1\n    ) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScope(): IScope {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const scope = this.scopeStack[i];\n      if (\n        (scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) &&\n        !(scope.flags & SCOPE_ARROW)\n      ) {\n        return scope;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: string[] = [];\n\n  // enums (which are also in .types)\n  enums: string[] = [];\n\n  // const enums (which are also in .enums and .types)\n  constEnums: string[] = [];\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: string[] = [];\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: string[] = [];\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.push(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (\n      this.scopeStack[0].types.indexOf(id.name) === -1 &&\n      this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\nexport const PARAM = 0b000, // Initial Parameter flags\n  PARAM_YIELD = 0b001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b010, // track [Await] production parameter\n  PARAM_RETURN = 0b100; // track [Return] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above. Note that the [In] parameter is\n// tracked in `noIn` argument of `parseExpression`.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = typeof PARAM | typeof PARAM_AWAIT | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { TokenType } from \"../../tokenizer/types\";\nimport type State from \"../../tokenizer/state\";\nimport { types as tt } from \"../../tokenizer/types\";\nimport { types as ct } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Pos, Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors } from \"../../parser/location\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"public\"\n  | \"private\"\n  | \"protected\";\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\nconst TSErrors = Object.freeze({\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier\",\n  DeclareClassFieldHasInitializer:\n    \"'declare' class fields cannot have an initializer\",\n  DuplicateModifier: \"Duplicate modifier: '%0'\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier\",\n  IndexSignatureHasAccessibility:\n    \"Index signatures cannot have an accessibility modifier ('%0')\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility:\n    \"Private elements cannot have an accessibility modifier ('%0')\",\n  TemplateTypeHasSubstitution:\n    \"Template literal types cannot have any substitution\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind:\n    \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0\",\n});\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return this.match(tt.name);\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return (\n        !this.hasPrecedingLineBreak() &&\n        !this.match(tt.parenL) &&\n        !this.match(tt.parenR) &&\n        !this.match(tt.colon) &&\n        !this.match(tt.eq) &&\n        !this.match(tt.question) &&\n        !this.match(tt.bang)\n      );\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(allowedModifiers: T[]): ?T {\n      if (!this.match(tt.name)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (\n        allowedModifiers.indexOf(modifier) !== -1 &&\n        this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))\n      ) {\n        return modifier;\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers<T: TsModifier>(\n      modified: { [key: TsModifier]: ?true },\n      allowedModifiers: T[],\n    ): void {\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?T = this.tsParseModifier(allowedModifiers);\n\n        if (!modifier) break;\n\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        }\n        modified[modifier] = true;\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.isRelational(\">\");\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n    ): ?(T[]) {\n      const result = [];\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expectRelational(\"<\");\n        }\n      }\n\n      const result = this.tsParseDelimitedList(kind, parseElement);\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expectRelational(\">\");\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.isRelational(\"<\")) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.isRelational(\"<\") || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n      );\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(\n          returnToken,\n        );\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma)) {\n        this.semicolon();\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      return this.eat(tt.name) && this.match(tt.colon);\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (!readonly && (this.match(tt.parenL) || this.isRelational(\"<\"))) {\n        const method: N.TsMethodSignature = nodeAny;\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      const readonly = !!this.tsParseModifier([\"readonly\"]);\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        if (readonly) node.readonly = true;\n        return idx;\n      }\n\n      this.parsePropertyName(node, /* isPrivateNameAllowed */ false);\n      return this.tsParsePropertyOrMethodSignature(node, readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(\"readonly\");\n      }\n      if (this.isContextual(\"readonly\")) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.parseIdentifierName(node.start);\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(\"readonly\");\n      } else if (this.eatContextual(\"readonly\")) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure:\n      //   No mandatory elements may follow optional elements\n      //   If there's a rest element, it must be at the end of the tuple\n      let seenOptionalElement = false;\n      node.elementTypes.forEach(elementNode => {\n        if (elementNode.type === \"TSOptionalType\") {\n          seenOptionalElement = true;\n        } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType {\n      // parses `...TsType[]`\n      if (this.match(tt.ellipsis)) {\n        const restNode: N.TsRestType = this.startNode();\n        this.next(); // skips ellipsis\n        restNode.typeAnnotation = this.tsParseType();\n        if (\n          this.match(tt.comma) &&\n          this.lookaheadCharCode() !== charCodes.rightSquareBracket\n        ) {\n          this.raiseRestNotLast(this.state.start);\n        }\n        return this.finishNode(restNode, \"TSRestType\");\n      }\n\n      const type = this.tsParseType();\n      // parses `TsType?`\n      if (this.eat(tt.question)) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        this.expect(tt._new);\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      const templateNode = this.parseTemplate(false);\n      if (templateNode.expressions.length > 0) {\n        this.raise(\n          templateNode.expressions[0].start,\n          TSErrors.TemplateTypeHasSubstitution,\n        );\n      }\n      node.literal = templateNode;\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.name:\n        case tt._void:\n        case tt._null: {\n          const type = this.match(tt._void)\n            ? \"TSVoidKeyword\"\n            : this.match(tt._null)\n            ? \"TSNullKeyword\"\n            : keywordTypeFromName(this.state.value);\n          if (\n            type !== undefined &&\n            this.lookaheadCharCode() !== charCodes.dot\n          ) {\n            const node: N.TsKeywordType = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n          return this.tsParseTypeReference();\n        }\n        case tt.string:\n        case tt.num:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            if (this.lookahead().type !== tt.num) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          return this.tsParseParenthesizedType();\n        case tt.backQuote:\n          return this.tsParseTemplateLiteralType();\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(\n      operator: \"keyof\" | \"unique\" | \"readonly\",\n    ): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      this.expectContextual(operator);\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(\"infer\");\n      const typeParameter = this.startNode();\n      typeParameter.name = this.parseIdentifierName(typeParameter.start);\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw =>\n        this.isContextual(kw),\n      );\n      return operator\n        ? this.tsParseTypeOperator(operator)\n        : this.isContextual(\"infer\")\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      this.eat(operator);\n      let type = parseConstituentType();\n      if (this.match(operator)) {\n        const types = [type];\n        while (this.eat(operator)) {\n          types.push(parseConstituentType());\n        }\n        const node: N.TsUnionType | N.TsIntersectionType = this.startNodeAtNode(\n          type,\n        );\n        node.types = types;\n        type = this.finishNode(node, kind);\n      }\n      return type;\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.isRelational(\"<\")) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (this.match(tt.name) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const asserts = this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            const node: N.TsTypePredicate = this.startNodeAtNode(t);\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          const node: N.TsTypePredicate = this.startNodeAtNode(t);\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        const node = this.startNodeAtNode(t);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (\n        !this.match(tt.name) ||\n        this.state.value !== \"asserts\" ||\n        this.hasPrecedingLineBreak()\n      ) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!this.match(tt.name) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expectRelational(\">\");\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.isRelational(\"<\")) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_TS_INTERFACE,\n        undefined,\n        \"typescript interface declaration\",\n      );\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsExpectThenParseType(tt.eq);\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssign();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n        undefined,\n        \"typescript enum declaration\",\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          BIND_TS_NAMESPACE,\n          null,\n          \"module or namespace declaration\",\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(\"global\")) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        BIND_LEXICAL,\n        undefined,\n        \"import equals declaration\",\n      );\n      this.expect(tt.eq);\n      node.moduleReference = this.tsParseModuleReference();\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(\"require\") &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(\"require\");\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(\"let\")) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case tt._function:\n          return this.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        case tt._class:\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to now how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        case tt._const:\n          if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n          }\n        // falls through\n        case tt._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n        case tt.name: {\n          const value = this.state.value;\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, /* next */ true);\n          }\n        }\n      }\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      switch (value) {\n        case \"abstract\":\n          if (this.tsCheckLineTerminatorAndMatch(tt._class, next)) {\n            const cls: N.ClassDeclaration = node;\n            cls.abstract = true;\n            if (next) {\n              this.next();\n              if (!this.match(tt._class)) {\n                this.unexpected(null, tt._class);\n              }\n            }\n            return this.parseClass(\n              cls,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          }\n          break;\n\n        case \"enum\":\n          if (next || this.match(tt.name)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (next) this.next();\n          if (this.match(tt.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"namespace\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (this.tsCheckLineTerminatorAndMatch(tt.name, next)) {\n            if (next) this.next();\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminatorAndMatch(tokenType: TokenType, next: boolean) {\n      return (next || this.match(tokenType)) && !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.isRelational(\"<\")) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expectRelational(\"<\");\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      // This reads the next token after the `>` too, so do this in the enclosing context.\n      // But be sure not to parse a regex in the jsx expression `<C<number> />`, so set exprAllowed = false\n      this.state.exprAllowed = false;\n      this.expectRelational(\">\");\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      if (this.match(tt.name)) {\n        switch (this.state.value) {\n          case \"abstract\":\n          case \"declare\":\n          case \"enum\":\n          case \"interface\":\n          case \"module\":\n          case \"namespace\":\n          case \"type\":\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      if (allowModifiers) {\n        accessibility = this.parseAccessModifier();\n        readonly = !!this.tsParseModifier([\"readonly\"]);\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        this.state.exprAllowed = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsync(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n              node.typeParameters = typeArguments;\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (this.match(tt.backQuote)) {\n              return this.parseTaggedTemplateExpression(\n                startPos,\n                startLoc,\n                base,\n                state,\n                typeArguments,\n              );\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.isRelational(\"<\")) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n      noIn: ?boolean,\n    ) {\n      if (\n        nonNull(tt._in.binop) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(\"as\")\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      if (this.match(tt.name) && this.lookahead().type === tt.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n      return super.parseImport(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.expect(tt._import);\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(\"as\")) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(\"namespace\");\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(\"abstract\") && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        this.parseClass(cls, true, true);\n        cls.abstract = true;\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.state.value === \"interface\") {\n        const result = this.tsParseDeclaration(\n          this.startNode(),\n          this.state.value,\n          true,\n        );\n\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt.name && ahead.value === \"enum\") {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.expect(tt._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: { hadConstructor: boolean },\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"declare\"]);\n      const accessibility = this.parseAccessModifier();\n      if (accessibility) member.accessibility = accessibility;\n      this.tsParseModifiers(member, [\"declare\"]);\n\n      super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: { hadConstructor: boolean },\n      isStatic: boolean,\n      constructorAllowsSuper: boolean,\n    ): void {\n      this.tsParseModifiers(member, [\"abstract\", \"readonly\", \"declare\"]);\n\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if (isStatic) {\n          this.raise(member.start, TSErrors.IndexSignatureHasStatic);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n\n        return;\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member,\n        state,\n        isStatic,\n        constructorAllowsSuper,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      noIn: ?boolean,\n      startPos: number,\n      startLoc: Position,\n      refNeedsArrowPos?: ?Pos,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!refNeedsArrowPos || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          noIn,\n          startPos,\n          startLoc,\n          refNeedsArrowPos,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, noIn, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        // $FlowIgnore\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(\"declare\");\n\n      let declaration: ?N.Declaration;\n\n      if (this.match(tt.name)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (node.declare && this.match(tt.equal)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.isRelational(\"<\")) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(\"implements\")) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (this.match(tt.jsxTagStart)) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!jsx.aborted) */\n\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        if (context[context.length - 1] === ct.j_oTag) {\n          context.length -= 2;\n        } else if (context[context.length - 1] === ct.j_expr) {\n          context.length -= 1;\n        }\n      }\n\n      if (!(jsx && jsx.error) && !this.isRelational(\"<\")) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          (expr.extra && expr.extra.parenthesized)\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters && typeParameters.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx && jsx.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (typeCast && typeCast.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx && jsx.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast && typeCast.thrown) throw typeCast.error;\n\n      throw (jsx && jsx.error) || arrow.error || (typeCast && typeCast.error);\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node));\n        case \"TSParameterProperty\":\n          return super.toAssignable(node);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression);\n          return node;\n        default:\n          return super.toAssignable(node);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      bindingType: BindingTypes = BIND_NONE,\n      checkClashes: ?{ [key: string]: boolean },\n      contextDescription: string,\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(\n            expr.parameter,\n            bindingType,\n            checkClashes,\n            \"parameter property\",\n          );\n          return;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          this.checkLVal(\n            expr.expression,\n            bindingType,\n            checkClashes,\n            contextDescription,\n          );\n          return;\n        default:\n          super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.isRelational(\"<\") || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType && (code === 62 || code === 60)) {\n        return this.finishOp(tt.relational, 1);\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr && expr.type === \"TSTypeCastExpression\") {\n          this.raise(expr.start, TSErrors.UnexpectedTypeAnnotation);\n        }\n      }\n\n      return exprList;\n    }\n\n    shouldParseArrow() {\n      return this.match(tt.colon) || super.shouldParseArrow();\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.isRelational(\"<\")) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const firstParam = method.params[0];\n      const hasContextParam =\n        firstParam &&\n        firstParam.type === \"Identifier\" &&\n        firstParam.name === \"this\";\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { types as tt, TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\n\ntt.placeholder = new TokenType(\"%%\", { startsExpr: true });\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, \"A class name is required\");\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers && specifiers.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(\"from\") && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(\"from\");\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { types as tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.eat(tt.modulo);\n        if (this.match(tt.name)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\n\nexport type Plugin = string | [string, Object];\n\nexport type PluginList = $ReadOnlyArray<Plugin>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\nexport function hasPlugin(plugins: PluginList, name: string): boolean {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (\n    hasPlugin(plugins, \"pipelineOperator\") &&\n    !PIPELINE_PROPOSALS.includes(\n      getPluginOption(plugins, \"pipelineOperator\", \"proposal\"),\n    )\n  ) {\n    throw new Error(\n      \"'pipelineOperator' requires 'proposal' option whose value should be one of: \" +\n        PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> = Object.keys(\n  mixinPlugins,\n);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Line from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { types as tt, type TokenType } from \"./types\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init(options: Options): void {\n    this.strict =\n      options.strictMode === false ? false : options.sourceType === \"module\";\n\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  errors: SyntaxError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  inParameters: boolean = false;\n  maybeInArrowParameters: boolean = false;\n  inPipeline: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  inPropertyName: boolean = false;\n  hasFlowComment: boolean = false;\n  isIterator: boolean = false;\n\n  // For the smartPipelines plugin:\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F# plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  yieldPos: number = -1;\n  awaitPos: number = -1;\n\n  // Comment store.\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  trailingComments: Array<N.Comment> = [];\n  leadingComments: Array<N.Comment> = [];\n  commentStack: Array<{\n    start: number,\n    leadingComments: ?Array<N.Comment>,\n    trailingComments: ?Array<N.Comment>,\n    type: string,\n  }> = [];\n  // $FlowIgnore this is initialized when the parser starts.\n  commentPreviousNode: N.Node = null;\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n  lineStart: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  context: Array<TokContext> = [ct.braceStatement];\n  exprAllowed: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to throw an error for\n  // an octal literal in a directive that occurs prior\n  // to a \"use strict\" directive.\n  octalPositions: number[] = [];\n\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  exportedIdentifiers: Array<string> = [];\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport { types as tt, keywords as keywordTypes, type TokenType } from \"./types\";\nimport { type TokContext, types as ct } from \"./context\";\nimport LocationParser, { Errors } from \"../parser/location\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreak,\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  type: TokenType;\n  value: any;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends LocationParser {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +unexpected: (pos?: ?number, messageOrType?: string | TokenType) => empty;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // TODO\n\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  // TODO\n\n  lookahead(): State {\n    const old = this.state;\n    this.state = old.clone(true);\n\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    const thisTokEnd = this.state.pos;\n    skipWhiteSpace.lastIndex = thisTokEnd;\n    const skip = skipWhiteSpace.exec(this.input);\n    // $FlowIgnore: The skipWhiteSpace ensures to match any string\n    return thisTokEnd + skip[0].length;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (!this.match(tt.num) && !this.match(tt.string)) return;\n    this.state.pos = this.state.start;\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart =\n        this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n    this.nextToken();\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    const curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n    this.state.octalPositions = [];\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    const override = curContext?.override;\n    if (override) {\n      override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(\n    block: boolean,\n    text: string,\n    start: number,\n    end: number,\n    startLoc: Position,\n    endLoc: Position,\n  ): void {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc),\n    };\n\n    if (this.options.tokens) this.pushToken(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment(): void {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n    while (\n      (match = lineBreakG.exec(this.input)) &&\n      match.index < this.state.pos\n    ) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      true,\n      this.input.slice(start + 2, end),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  skipLineComment(startSkip: number): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n\n    this.pushComment(\n      false,\n      this.input.slice(start + startSkip, this.state.pos),\n      start,\n      this.state.pos,\n      startLoc,\n      this.state.curPosition(),\n    );\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk:\n              this.skipBlockComment();\n              break;\n\n            case charCodes.slash:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      this.hasPlugin(\"classPrivateProperties\") ||\n      this.hasPlugin(\"classPrivateMethods\") ||\n      this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\"\n    ) {\n      this.finishOp(tt.hash, 1);\n    } else {\n      throw this.raise(this.state.pos, Errors.InvalidOrUnexpectedToken, \"#\");\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    // '/'\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    let ch = this.input.charCodeAt(this.state.pos);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    // Exponentiation operator **\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    if (next === charCodes.equalsTo && !exprAllowed) {\n      width++;\n      type = tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    // '^'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (\n        next === charCodes.dash &&\n        !this.inModule &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan &&\n        (this.state.lastTokEnd === 0 ||\n          lineBreak.test(\n            this.input.slice(this.state.lastTokEnd, this.state.pos),\n          ))\n      ) {\n        // A `-->` line comment\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code: number): void {\n    // '<>'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size =\n        code === charCodes.greaterThan &&\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.greaterThan\n          ? 3\n          : 2;\n      if (this.input.charCodeAt(this.state.pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (\n      next === charCodes.exclamationMark &&\n      code === charCodes.lessThan &&\n      !this.inModule &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dash &&\n      this.input.charCodeAt(this.state.pos + 3) === charCodes.dash\n    ) {\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      size = 2;\n    }\n\n    this.finishOp(tt.relational, size);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark && !this.state.inType) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketL);\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceL);\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        ++this.state.pos;\n        this.finishToken(tt.backQuote);\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n      case charCodes.greaterThan:\n        this.readToken_lt_gt(code);\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.pos;\n    let escaped, inClass;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charAt(this.state.pos);\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n        escaped = ch === \"\\\\\";\n      }\n      ++this.state.pos;\n    }\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (\n        isIdentifierChar(charCode) ||\n        charCode === charCodes.backslash\n      ) {\n        this.raise(this.state.pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        if (code === charCodes.underscore) {\n          const prev = this.input.charCodeAt(this.state.pos - 1);\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          } else if (\n            forbiddenSiblings.indexOf(prev) > -1 ||\n            forbiddenSiblings.indexOf(next) > -1 ||\n            Number.isNaN(next)\n          ) {\n            this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n          }\n\n          // Ignore this _ character\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (this.input.charCodeAt(this.state.pos) === charCodes.lowercaseN) {\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isNonOctalDecimalInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    let octal =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(start, Errors.StrictOctalLiteral);\n      }\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n        isNonOctalDecimalInt = true;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !octal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    // disallow numeric separators in non octal decimals and legacy octal likes\n    if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n      const underscorePos = this.input\n        .slice(start, this.state.pos)\n        .indexOf(\"_\");\n      if (underscorePos > 0) {\n        this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n      }\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (next === charCodes.lowercaseN) {\n        // disallow floats, legacy octal syntax and non octal decimals\n        // new style octal (\"0o\") is handled in this.readRadixNumber\n        if (isFloat || octal || isNonOctalDecimalInt) {\n          this.raise(start, \"Invalid BigIntLiteral\");\n        }\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and \"n\" for BigInts\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads template string tokens.\n\n  readTmplToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (\n        ch === charCodes.graveAccent ||\n        (ch === charCodes.dollarSign &&\n          this.input.charCodeAt(this.state.pos + 1) ===\n            charCodes.leftCurlyBrace)\n      ) {\n        if (this.state.pos === this.state.start && this.match(tt.template)) {\n          if (ch === charCodes.dollarSign) {\n            this.state.pos += 2;\n            this.finishToken(tt.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(tt.backQuote);\n            return;\n          }\n        }\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.template, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          // $FlowFixMe\n          let octalStr = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/)[0];\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, Errors.StrictOctalLiteral);\n            } else {\n              // This property is used to throw an error for\n              // an octal literal in a directive that occurs prior\n              // to a \"use strict\" directive.\n              this.state.octalPositions.push(codePos);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  readWord1(): string {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === charCodes.atSign) {\n        ++this.state.pos;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word: string): boolean {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(): void {\n    const word = this.readWord1();\n    const type = keywordTypes.get(word) || tt.name;\n\n    // Allow @@iterator and @@asyncIterator as a identifier only inside type\n    if (\n      this.state.isIterator &&\n      (!this.isIterator(word) || !this.state.inType)\n    ) {\n      this.raise(this.state.pos, Errors.InvalidIdentifier, word);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes(): void {\n    const kw = this.state.type.keyword;\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, Errors.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  braceIsBlock(prevType: TokenType): boolean {\n    const parent = this.curContext();\n    if (parent === ct.functionExpression || parent === ct.functionStatement) {\n      return true;\n    }\n    if (\n      prevType === tt.colon &&\n      (parent === ct.braceStatement || parent === ct.braceExpression)\n    ) {\n      return !parent.isExpr;\n    }\n\n    // The check for `tt.name && exprAllowed` detects whether we are\n    // after a `yield` or `of` construct. See the `updateContext` for\n    // `tt.name`.\n    if (\n      prevType === tt._return ||\n      (prevType === tt.name && this.state.exprAllowed)\n    ) {\n      return lineBreak.test(\n        this.input.slice(this.state.lastTokEnd, this.state.start),\n      );\n    }\n\n    if (\n      prevType === tt._else ||\n      prevType === tt.semi ||\n      prevType === tt.eof ||\n      prevType === tt.parenR ||\n      prevType === tt.arrow\n    ) {\n      return true;\n    }\n\n    if (prevType === tt.braceL) {\n      return parent === ct.braceStatement;\n    }\n\n    if (\n      prevType === tt._var ||\n      prevType === tt._const ||\n      prevType === tt.name\n    ) {\n      return false;\n    }\n\n    if (prevType === tt.relational) {\n      // `class C<T> { ... }`\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType: TokenType): void {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === tt.dot || prevType === tt.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if ((update = type.updateContext)) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n}\n","// @flow\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport * as charCodes from \"charcodes\";\nimport { Errors } from \"./location\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // TODO\n\n  isRelational(op: \"<\" | \">\"): boolean {\n    return this.match(tt.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op: \"<\" | \">\"): boolean {\n    const next = this.nextTokenStart();\n    if (this.input.charAt(next) === op) {\n      if (next + 1 === this.input.length) {\n        return true;\n      }\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== op.charCodeAt(0) && afterNext !== charCodes.equalsTo;\n    }\n    return false;\n  }\n\n  // TODO\n\n  expectRelational(op: \"<\" | \">\"): void {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, tt.relational);\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(name: string): boolean {\n    return (\n      this.match(tt.name) &&\n      this.state.value === name &&\n      !this.state.containsEsc\n    );\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    return (\n      this.input.slice(nameStart, nameEnd) === name &&\n      (nameEnd === this.input.length ||\n        !isIdentifierChar(this.input.charCodeAt(nameEnd)))\n    );\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(name: string): boolean {\n    return this.isContextual(name) && this.eat(tt.name);\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(name: string, message?: string): void {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(): void {\n    if (!this.isLineTerminator()) this.unexpected(null, tt.semi);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: string | TokenType = \"Unexpected token\",\n  ): empty {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name: string, pos?: ?number): true {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: [name] },\n        `This experimental syntax requires enabling the parser plugin: '${name}'`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names: Array<string>, pos?: ?number): void {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: names },\n        `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\n          \", \",\n        )}'`,\n      );\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (\n      this.state.yieldPos !== -1 &&\n      (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)\n    ) {\n      this.raise(\n        this.state.yieldPos,\n        \"Yield cannot be used as name inside a generator function\",\n      );\n    }\n    if (this.state.awaitPos !== -1) {\n      this.raise(\n        this.state.awaitPos,\n        \"Await cannot be used as name inside an async function\",\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, SyntaxError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: SyntaxError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto } = refExpressionErrors;\n    if (!andThrow) return shorthandAssign >= 0 || doubleProto >= 0;\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, Errors.DuplicateProto);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track\n * - **shorthandAssign**: track initializer `=` position when parsing ambiguous\n *   patterns. When we are sure the parsed pattern is a RHS, which means it is\n *   not a pattern, we will throw on this position on invalid assign syntax,\n *   otherwise it will be reset to -1\n * - **doubleProto**: track the duplicate `__proto__` key position when parsing\n *   ambiguous object patterns. When we are sure the parsed pattern is a RHS,\n *   which means it is an object literal, we will throw on this position for\n *   __proto__ redefinition, otherwise it will be reset to -1\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string;\n  start: number;\n  end: number;\n  loc: SourceLocation;\n  range: [number, number];\n  leadingComments: Array<Comment>;\n  trailingComments: Array<Comment>;\n  innerComments: Array<Comment>;\n  extra: { [key: string]: any };\n\n  __clone(): this {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // $FlowIgnore\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\nimport * as charCodes from \"charcodes\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./location\";\n\nconst unwrapParenthesizedExpression = (node: Node) => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssign: (\n    noIn?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObj: <T: ObjectPattern | ObjectExpression>(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n  // NOTE: There is a corresponding \"isAssignable\" method in flow.js.\n  // When this one is updated, please check if also that one needs to be updated.\n\n  toAssignable(node: Node): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (\n        parenthesized.type !== \"Identifier\" &&\n        parenthesized.type !== \"MemberExpression\"\n      ) {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(((parenthesized: any): Expression));\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop: Node, isLast: boolean) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr && expr.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(\n      false,\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObj(true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  checkLVal(\n    expr: Expression,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?{ [key: string]: boolean },\n    contextDescription: string,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(expr.name, this.inModule)\n            : isStrictBindOnlyReservedWord(expr.name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            expr.name,\n          );\n        }\n\n        if (checkClashes) {\n          // we need to prefix this with an underscore for the cases where we have a key of\n          // `__proto__`. there's a bug in old V8 where the following wouldn't work:\n          //\n          //   > var obj = Object.create(null);\n          //   undefined\n          //   > obj.__proto__\n          //   null\n          //   > obj.__proto__ = true;\n          //   true\n          //   > obj.__proto__\n          //   null\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (prop.type === \"ObjectProperty\") prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (prop.type === \"ObjectMethod\") continue;\n\n          this.checkLVal(\n            prop,\n            bindingType,\n            checkClashes,\n            \"object destructuring pattern\",\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              bindingType,\n              checkClashes,\n              \"array destructuring pattern\",\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          bindingType,\n          checkClashes,\n          \"assignment pattern\",\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          bindingType,\n          checkClashes,\n          \"rest element\",\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          bindingType,\n          checkClashes,\n          \"parenthesized expression\",\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport { types as ct } from \"../tokenizer/context\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport type { Pos, Position } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_RETURN,\n  PARAM,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport { Errors } from \"./location\";\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  */\n\n  // Check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  checkDuplicatedProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      prop.computed ||\n      prop.kind ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `noIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `noIn` is true, the production parameter [In] is not present.\n  //   Whenever [?In] appears in the right-hand sides of a production, we pass\n  //   `noIn` to the subroutine calls.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    noIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(noIn, refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  parseMaybeAssign(\n    noIn?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield(noIn);\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      } else {\n        // The tokenizer will assume an expression is allowed after\n        // `yield`, but this isn't that kind of yield\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(tt.parenL) || this.match(tt.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(\n      noIn,\n      refExpressionErrors,\n      refNeedsArrowPos,\n    );\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left);\n        refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  parseMaybeConditional(\n    noIn: ?boolean,\n    refExpressionErrors: ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    return this.parseConditional(\n      expr,\n      noIn,\n      startPos,\n      startLoc,\n      refNeedsArrowPos,\n    );\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    noIn: ?boolean,\n    startPos: number,\n    startLoc: Position,\n    // FIXME: Disabling this for now since can't seem to get it to play nicely\n    // eslint-disable-next-line no-unused-vars\n    refNeedsArrowPos?: ?Pos,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  // Start the precedence parser.\n\n  parseExprOps(\n    noIn: ?boolean,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n    if (this.checkExpressionErrors(refExpressionErrors, false)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    let prec = this.state.type.binop;\n    if (prec != null && (!noIn || !this.match(tt._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n        if (\n          operator === \"**\" &&\n          left.type === \"UnaryExpression\" &&\n          (this.options.createParenthesizedExpressions ||\n            !(left.extra && left.extra.parenthesized))\n        ) {\n          this.raise(\n            left.argument.start,\n            Errors.UnexpectedTokenUnaryExponentiation,\n          );\n        }\n\n        const op = this.state.type;\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = ((tt.logicalAND: any): { binop: number }).binop;\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\"\n        ) {\n          if (\n            this.match(tt.name) &&\n            this.state.value === \"await\" &&\n            this.prodParam.hasAwait\n          ) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n          noIn,\n        );\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(\n                this.parseExprOpBaseRightExpr(op, prec, noIn),\n                startPos,\n                startLoc,\n              );\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n      // falls through\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    op: TokenType,\n    prec: number,\n    noIn: ?boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      op.rightAssociative ? prec - 1 : prec,\n      noIn,\n    );\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  parseMaybeUnary(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(tt.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      this.next();\n\n      node.argument = this.parseMaybeUnary();\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (\n          arg.type === \"MemberExpression\" &&\n          arg.property.type === \"PrivateName\"\n        ) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      return this.finishNode(\n        node,\n        update ? \"UpdateExpression\" : \"UnaryExpression\",\n      );\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (\n      expr.type === \"ArrowFunctionExpression\" &&\n      expr.start === potentialArrowAt\n    ) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsync(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    if (!noCalls && this.eat(tt.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(\n        this.finishNode(node, \"BindExpression\"),\n        startPos,\n        startLoc,\n        noCalls,\n      );\n    }\n    let optional = false;\n    if (this.match(tt.questionDot)) {\n      state.optionalChainMember = optional = true;\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        state.stop = true;\n        return base;\n      }\n      this.next();\n    }\n    const computed = this.eat(tt.bracketL);\n    if (\n      (optional && !this.match(tt.parenL) && !this.match(tt.backQuote)) ||\n      computed ||\n      this.eat(tt.dot)\n    ) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed\n        ? this.parseExpression()\n        : optional\n        ? this.parseIdentifier(true)\n        : this.parseMaybePrivateName(true);\n      node.computed = computed;\n\n      if (node.property.type === \"PrivateName\") {\n        if (node.object.type === \"Super\") {\n          this.raise(startPos, Errors.SuperPrivateField);\n        }\n        this.classScope.usePrivateName(\n          node.property.id.name,\n          node.property.start,\n        );\n      }\n\n      if (computed) {\n        this.expect(tt.bracketR);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    } else if (!noCalls && this.match(tt.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n\n      this.next();\n\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      if (optional) {\n        node.optional = true;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(\n          tt.parenR,\n          state.maybeAsyncArrow,\n          base.type === \"Import\",\n          base.type !== \"Super\",\n          node,\n        );\n      }\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n\n        node = this.parseAsyncArrowFromCallExpression(\n          this.startNodeAt(startPos, startLoc),\n          node,\n        );\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n\n        // We keep the old value if it isn't null, for cases like\n        //   (x = async(yield)) => {}\n        //\n        // Hi developer of the future :) If you are implementing generator\n        // arrow functions, please read the note below about \"await\" and\n        // verify if the same logic is needed for yield.\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        // Await is trickier than yield. When parsing a possible arrow function\n        // (e.g. something starting with `async(`) we don't know if its possible\n        // parameters will actually be inside an async arrow function or if it is\n        // a normal call expression.\n        // If it ended up being a call expression, if we are in a context where\n        // await expression are disallowed (and thus \"await\" is an identifier)\n        // we must be careful not to leak this.state.awaitPos to an even outer\n        // context, where \"await\" could not be an identifier.\n        // For example, this code is valid because \"await\" isn't directly inside\n        // an async function:\n        //\n        //     async function a() {\n        //       function b(param = async (await)) {\n        //       }\n        //     }\n        //\n        if (\n          (!this.isAwaitAllowed() && !oldMaybeInArrowParameters) ||\n          oldAwaitPos !== -1\n        ) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      return node;\n    } else if (this.match(tt.backQuote)) {\n      return this.parseTaggedTemplateExpression(\n        startPos,\n        startLoc,\n        base,\n        state,\n      );\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(\n    startPos: number,\n    startLoc: Position,\n    base: N.Expression,\n    state: N.ParseSubscriptState,\n    typeArguments?: ?N.TsTypeParameterInstantiation,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsync(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      this.input.slice(base.start, base.end) === \"async\"\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, Errors.ImportCallArity);\n      } else {\n        const importArg = node.arguments[0];\n        if (importArg && importArg.type === \"SpreadElement\") {\n          this.raise(importArg.start, Errors.ImportCallSpreadArgument);\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    possibleAsyncArrow: boolean,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (dynamicImport) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      // we need to make sure that if this is an async arrow functions,\n      // that we don't allow inner parens inside the params\n      if (this.match(tt.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(\n        this.parseExprListItem(\n          false,\n          possibleAsyncArrow ? new ExpressionErrors() : undefined,\n          possibleAsyncArrow ? { start: 0 } : undefined,\n          allowPlaceholder,\n        ),\n      );\n    }\n\n    // we found an async arrow function so let's not allow any inner parens\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    // If a division operator appears in an expression position, the\n    // tokenizer got confused, and we force it to read a regexp instead.\n    if (this.state.type === tt.slash) this.readRegexp();\n\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case tt._super:\n        node = this.startNode();\n        this.next();\n        if (\n          this.match(tt.parenL) &&\n          !this.scope.allowDirectSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(node.start, Errors.SuperNotAllowed);\n        } else if (\n          !this.scope.allowSuper &&\n          !this.options.allowSuperOutsideMethod\n        ) {\n          this.raise(node.start, Errors.UnexpectedSuper);\n        }\n\n        if (\n          !this.match(tt.parenL) &&\n          !this.match(tt.bracketL) &&\n          !this.match(tt.dot)\n        ) {\n          this.raise(node.start, Errors.UnsupportedSuper);\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt.name: {\n        node = this.startNode();\n        const containsEsc = this.state.containsEsc;\n        const id = this.parseIdentifier();\n\n        if (\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt._function) &&\n          !this.canInsertSemicolon()\n        ) {\n          const last = this.state.context.length - 1;\n          if (this.state.context[last] !== ct.functionStatement) {\n            // Since \"async\" is an identifier and normally identifiers\n            // can't be followed by expression, the tokenizer assumes\n            // that \"function\" starts a statement.\n            // Fixing it in the tokenizer would mean tracking not only the\n            // previous token (\"async\"), but also the one before to know\n            // its beforeExpr value.\n            // It's easier and more efficient to adjust the context here.\n            throw new Error(\"Internal error\");\n          }\n          this.state.context[last] = ct.functionExpression;\n\n          this.next();\n          return this.parseFunction(node, undefined, true);\n        } else if (\n          canBeArrow &&\n          !containsEsc &&\n          id.name === \"async\" &&\n          this.match(tt.name) &&\n          !this.canInsertSemicolon()\n        ) {\n          const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n          const oldYieldPos = this.state.yieldPos;\n          const oldAwaitPos = this.state.awaitPos;\n          this.state.maybeInArrowParameters = true;\n          this.state.yieldPos = -1;\n          this.state.awaitPos = -1;\n          const params = [this.parseIdentifier()];\n          this.expect(tt.arrow);\n          this.checkYieldAwaitInDefaultParams();\n          this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n          this.state.yieldPos = oldYieldPos;\n          this.state.awaitPos = oldAwaitPos;\n          // let foo = async bar => {};\n          this.parseArrowExpression(node, params, true);\n          return node;\n        }\n\n        if (canBeArrow && this.match(tt.arrow) && !this.canInsertSemicolon()) {\n          this.next();\n          this.parseArrowExpression(node, [id], false);\n          return node;\n        }\n\n        return id;\n      }\n\n      case tt._do: {\n        this.expectPlugin(\"doExpressions\");\n        const node = this.startNode();\n        this.next();\n        const oldLabels = this.state.labels;\n        this.state.labels = [];\n        node.body = this.parseBlock();\n        this.state.labels = oldLabels;\n        return this.finishNode(node, \"DoExpression\");\n      }\n\n      case tt.regexp: {\n        const value = this.state.value;\n        node = this.parseLiteral(value.value, \"RegExpLiteral\");\n        node.pattern = value.pattern;\n        node.flags = value.flags;\n        return node;\n      }\n\n      case tt.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case tt.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case tt.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case tt._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case tt._true:\n      case tt._false:\n        return this.parseBooleanLiteral();\n\n      case tt.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case tt.bracketL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        node = this.startNode();\n        this.next();\n        node.elements = this.parseExprList(\n          tt.bracketR,\n          true,\n          refExpressionErrors,\n          node,\n        );\n        if (!this.state.maybeInArrowParameters) {\n          // This could be an array pattern:\n          //   ([a: string, b: string]) => {}\n          // In this case, we don't have to call toReferencedList. We will\n          // call it, if needed, when we are sure that it is a parenthesized\n          // expression by calling toReferencedListDeep.\n          this.toReferencedList(node.elements);\n        }\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return this.finishNode(node, \"ArrayExpression\");\n      }\n      case tt.braceL: {\n        const oldInFSharpPipelineDirectBody = this.state\n          .inFSharpPipelineDirectBody;\n        this.state.inFSharpPipelineDirectBody = false;\n        const ret = this.parseObj(false, refExpressionErrors);\n        this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n        return ret;\n      }\n      case tt._function:\n        return this.parseFunctionExpression();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNew();\n\n      case tt.backQuote:\n        return this.parseTemplate(false);\n\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.hash: {\n        if (this.state.inPipeline) {\n          node = this.startNode();\n\n          if (\n            this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\"\n          ) {\n            this.raise(node.start, Errors.PrimaryTopicRequiresSmartPipeline);\n          }\n\n          this.next();\n\n          if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n            this.raise(node.start, Errors.PrimaryTopicNotAllowed);\n          }\n\n          this.registerTopicReference();\n          return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n        }\n      }\n      // fall through\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral(): N.BooleanLiteral {\n    const node = this.startNode();\n    node.value = this.match(tt._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName(\n    isPrivateNameAllowed: boolean,\n  ): N.PrivateName | N.Identifier {\n    const isPrivate = this.match(tt.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.pos, Errors.UnexpectedPrivateField);\n      }\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionExpression\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.prodParam.hasYield && this.eat(tt.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(tt.dot);\n\n    if (this.isContextual(\"meta\")) {\n      this.expectPlugin(\"importMeta\");\n\n      if (!this.inModule) {\n        this.raiseWithData(\n          id.start,\n          { code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\" },\n          Errors.ImportMetaOutsideModule,\n        );\n      }\n      this.sawUnambiguousESM = true;\n    } else if (!this.hasPlugin(\"importMeta\")) {\n      this.raise(id.start, Errors.ImportCallArityLtOne);\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral<T: N.Literal>(\n    value: any,\n    type: /*T[\"kind\"]*/ string,\n    startPos?: number,\n    startLoc?: Position,\n  ): T {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.expect(tt.parenL);\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    const refNeedsArrowPos = { start: 0 };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma, refNeedsArrowPos.start || null);\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssign(\n            false,\n            refExpressionErrors,\n            this.parseParenItem,\n            refNeedsArrowPos,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow() &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n      for (const param of exprList) {\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    // We keep the old value if it isn't null, for cases like\n    //   (x = (yield)) => {}\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  parseNew(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"new\");\n\n    if (this.eat(tt.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        let error = Errors.UnexpectedNewTarget;\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (\n      node.callee.type === \"OptionalMemberExpression\" ||\n      node.callee.type === \"OptionalCallExpression\"\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const elem = this.startNode();\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n    elem.value = {\n      raw: this.input\n        .slice(this.state.start, this.state.end)\n        .replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value,\n    };\n    this.next();\n    elem.tail = this.match(tt.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      this.expect(tt.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(tt.braceR);\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // Parse an object literal or binding pattern.\n\n  parseObj<T: N.ObjectPattern | N.ObjectExpression>(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(tt.braceR)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parseObjectMember(isPattern, refExpressionErrors);\n      if (!isPattern) {\n        // $FlowIgnore RestElement will never be returned if !isPattern\n        this.checkDuplicatedProto(prop, propHash, refExpressionErrors);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    return this.finishNode(\n      node,\n      isPattern ? \"ObjectPattern\" : \"ObjectExpression\",\n    );\n  }\n\n  isAsyncProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      prop.key.name === \"async\" &&\n      (this.match(tt.name) ||\n        this.match(tt.num) ||\n        this.match(tt.string) ||\n        this.match(tt.bracketL) ||\n        this.state.type.keyword ||\n        this.match(tt.star)) &&\n      !this.hasPrecedingLineBreak()\n    );\n  }\n\n  parseObjectMember(\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement | N.RestElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      if (isPattern) {\n        this.next();\n        // Don't use parseRestBinding() as we only allow Identifier here.\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(tt.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(tt.star);\n      this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      isPattern,\n      refExpressionErrors,\n      containsEsc,\n    );\n\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop: N.ObjectMethod, isPattern: boolean): boolean {\n    return (\n      !isPattern &&\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n      (this.match(tt.string) || // get \"string\"() {}\n      this.match(tt.num) || // get 1() {}\n      this.match(tt.bracketL) || // get [\"string\"]() {}\n      this.match(tt.name) || // get foo() {}\n        !!this.state.type.keyword) // get debugger() {}\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      method.params[method.params.length - 1].type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    containsEsc: boolean,\n  ): ?N.ObjectMethod {\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop, /* isPrivateNameAllowed */ false);\n      this.parseMethod(\n        prop,\n        /* isGenerator */ false,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssign(false, refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else if (this.match(tt.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          prop.key.__clone(),\n        );\n      } else {\n        prop.value = prop.key.__clone();\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    containsEsc: boolean,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        containsEsc,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n    isPrivateNameAllowed: boolean,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(tt.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      // We check if it's valid for it to be a private name when we push it.\n      (prop: $FlowFixMe).key =\n        this.match(tt.num) || this.match(tt.string) || this.match(tt.bigint)\n          ? this.parseExprAtom()\n          : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (prop.key.type !== \"PrivateName\") {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    this.prodParam.enter(functionFlags(isAsync, false));\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              BIND_OUTSIDE,\n              undefined,\n              \"function name\",\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    // $FlowIssue\n    const nameHash: {} = Object.create(null);\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(\n        node.params[i],\n        BIND_VAR,\n        allowDuplicates ? null : nameHash,\n        \"function parameter list\",\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    refNeedsArrowPos: ?Pos,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (allowEmpty && this.match(tt.comma)) {\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors, refNeedsArrowPos),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(\n        false,\n        refExpressionErrors,\n        this.parseParenItem,\n        refNeedsArrowPos,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    if (this.match(tt.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n\n      // `class` and `function` keywords push new context into this.context.\n      // But there is no chance to pop the context if the keyword is consumed\n      // as an identifier such as a property name.\n      // If the previous token is a dot, this does not apply because the\n      // context-managing code already ignored the keyword\n      if (\n        (name === \"class\" || name === \"function\") &&\n        (this.state.lastTokEnd !== this.state.lastTokStart + 1 ||\n          this.input.charCodeAt(this.state.lastTokStart) !== charCodes.dot)\n      ) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      this.state.type = tt.name;\n    } else {\n      this.checkReservedWord(\n        name,\n        this.state.start,\n        !!this.state.type.keyword,\n        false,\n      );\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    if (this.prodParam.hasYield && word === \"yield\") {\n      this.raise(startLoc, Errors.YieldBindingIdentifier);\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      }\n      if (\n        this.state.awaitPos === -1 &&\n        (this.state.maybeInArrowParameters || this.isAwaitAllowed())\n      ) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (\n      this.scope.inClass &&\n      !this.scope.inNonArrowFunction &&\n      word === \"arguments\"\n    ) {\n      this.raise(startLoc, Errors.ArgumentsDisallowedInInitializer);\n      return;\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.prodParam.hasAwait && word === \"await\") {\n        this.raise(startLoc, Errors.AwaitNotInAsyncFunction);\n      } else {\n        this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.scope.inFunction) return this.prodParam.hasAwait;\n    if (this.options.allowAwaitOutsideFunction) return true;\n    if (this.hasPlugin(\"topLevelAwait\")) {\n      return this.inModule && this.prodParam.hasAwait;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(): N.AwaitExpression {\n    const node = this.startNode();\n\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.AwaitExpressionFormalParameter);\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (\n        this.hasPrecedingLineBreak() ||\n        // All the following expressions are ambiguous:\n        //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n        this.match(tt.plusMin) ||\n        this.match(tt.parenL) ||\n        this.match(tt.bracketL) ||\n        this.match(tt.backQuote) ||\n        // Sometimes the tokenizer generates tt.slash for regexps, and this is\n        // handler by parseExprAtom\n        this.match(tt.regexp) ||\n        this.match(tt.slash) ||\n        // This code could be parsed both as a modulo operator or as an intrinsic:\n        //   await %x(0)\n        (this.hasPlugin(\"v8intrinsic\") && this.match(tt.modulo))\n      ) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(noIn?: ?boolean): N.YieldExpression {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, Errors.YieldInParameter);\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n    if (\n      this.match(tt.semi) ||\n      (!this.match(tt.star) && !this.state.type.startsExpr) ||\n      this.hasPrecedingLineBreak()\n    ) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(tt.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(\n    childExpression: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n\n    this.checkSmartPipelineBodyEarlyErrors(\n      childExpression,\n      pipelineStyle,\n      startPos,\n    );\n\n    return this.parseSmartPipelineBodyInStyle(\n      childExpression,\n      pipelineStyle,\n      startPos,\n      startLoc,\n    );\n  }\n\n  checkSmartPipelineBodyEarlyErrors(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n  ): void {\n    if (this.match(tt.arrow)) {\n      // If the following token is invalidly `=>`, then throw a human-friendly error\n      // instead of something like 'Unexpected token, expected \";\"'.\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    } else if (\n      pipelineStyle === \"PipelineTopicExpression\" &&\n      childExpression.type === \"SequenceExpression\"\n    ) {\n      this.raise(startPos, Errors.PipelineBodySequenceExpression);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpression: N.Expression,\n    pipelineStyle: N.PipelineStyle,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, Errors.PipelineTopicUnused);\n        }\n        bodyNode.expression = childExpression;\n        break;\n      default:\n        throw new Error(\n          `Internal @babel/parser error: Unknown pipeline style (${pipelineStyle})`,\n        );\n    }\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression: N.Expression): N.PipelineStyle {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression)\n          ? \"PipelineBareFunction\"\n          : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // Enable topic references from outer contexts within smart pipeline bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicPermittingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // Disable topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withTopicForbiddingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Disable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 0,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  // Register the use of a primary topic reference (`#`) within the current\n  // topic context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number, noIn: ?boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnary(),\n      startPos,\n      startLoc,\n      prec,\n      noIn,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport { types as tt, type TokenType } from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"./location\";\nimport {\n  isIdentifierChar,\n  isIdentifierStart,\n  keywordRelationalOperator,\n} from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    program.sourceType = this.options.sourceType;\n\n    program.interpreter = this.parseInterpreterDirective();\n\n    this.parseBlockBody(program, true, true, tt.eof);\n\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) file.tokens = this.tokens;\n\n    return this.finishNode(file, \"File\");\n  }\n\n  // TODO\n\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const expr = stmt.expression;\n\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n\n    directive.value = this.finishNodeAt(\n      directiveLiteral,\n      \"DirectiveLiteral\",\n      expr.end,\n      expr.loc.end,\n    );\n\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    if (nextCh === charCodes.leftSquareBracket) return true;\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n      case tt._continue:\n        // $FlowFixMe\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._export:\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis ||\n          nextTokenCharCode === charCodes.dot\n        ) {\n          break;\n        }\n\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next();\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      starttype === tt.name &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raiseWithData(\n        node.start,\n        {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n        },\n        Errors.ImportOutsideModule,\n      );\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ): N.BreakStatement | N.ContinueStatement {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    keyword: string,\n  ) {\n    const isBreak = keyword === \"break\";\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(node.start, Errors.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(\"of\")) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    if (this.match(tt._in) || this.isContextual(\"of\")) {\n      this.toAssignable(init);\n      const description = this.isContextual(\"of\")\n        ? \"for-of statement\"\n        : \"for-in statement\";\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (\n      lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))\n    ) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the function body. They are permitted in function\n        // default-parameter expressions, which are part of the outer context,\n        // outside of the function body.\n        this.withTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n      this.scope.exit();\n\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the function body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the function body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const octalPositions = [];\n    let parsedNonDirective = false;\n    let oldStrict = null;\n\n    while (!this.eat(end)) {\n      // Track octal literals that occur before a \"use strict\" directive.\n      if (!parsedNonDirective && this.state.octalPositions.length) {\n        octalPositions.push(...this.state.octalPositions);\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (oldStrict === null && directive.value.value === \"use strict\") {\n          oldStrict = this.state.strict;\n          this.setStrict(true);\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    // Throw an error for any octal literals found before a\n    // \"use strict\" directive. Strict mode will be set at parse\n    // time for any literals that occur after the directive.\n    if (this.state.strict && octalPositions.length) {\n      for (const pos of octalPositions) {\n        this.raise(pos, Errors.StrictOctalLiteral);\n      }\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(\n        this,\n        /* hasStrictModeDirective */ oldStrict !== null,\n      );\n    }\n\n    if (oldStrict === false) {\n      this.setStrict(false);\n    }\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.expect(tt.semi);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.expect(tt.semi);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(tt.parenR);\n\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(\"of\"))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(\"of\")))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      \"variable declaration\",\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in test\n    // expressions, outside of the function body.\n    this.withTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || this.match(tt.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n\n    this.expect(tt.parenL);\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass);\n\n    this.state.strict = oldStrict;\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  parseClassBody(constructorAllowsSuper: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state = { hadConstructor: false };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body. They are permitted in test expressions,\n    // outside of the class body.\n    this.withTopicForbiddingContext(() => {\n      while (!this.eat(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    constructorAllowsSuper: boolean,\n  ): void {\n    let isStatic = false;\n    const containsEsc = this.state.containsEsc;\n\n    if (this.match(tt.name) && this.state.value === \"static\") {\n      const key = this.parseIdentifier(true); // eats 'static'\n\n      if (this.isClassMethod()) {\n        const method: N.ClassMethod = (member: any);\n\n        // a method named 'static'\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(\n          classBody,\n          method,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n        return;\n      } else if (this.isClassProperty()) {\n        const prop: N.ClassProperty = (member: any);\n\n        // a property named 'static'\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return;\n      } else if (containsEsc) {\n        throw this.unexpected();\n      }\n\n      // otherwise something static\n      isStatic = true;\n    }\n\n    this.parseClassMemberWithIsStatic(\n      classBody,\n      member,\n      state,\n      isStatic,\n      constructorAllowsSuper,\n    );\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: { hadConstructor: boolean },\n    isStatic: boolean,\n    constructorAllowsSuper: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    // Check the key is not a computed expression or string literal.\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isSimple &&\n      key.name === \"async\" &&\n      !containsEsc &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      this.parseClassPropertyName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isSimple &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !containsEsc &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member: N.ClassMember): N.Expression | N.Identifier {\n    const key = this.parsePropertyName(member, /* isPrivateNameAllowed */ true);\n\n    if (\n      !member.computed &&\n      member.static &&\n      ((key: $FlowSubtype<N.Identifier>).name === \"prototype\" ||\n        (key: $FlowSubtype<N.StringLiteral>).value === \"prototype\")\n    ) {\n      this.raise(key.start, Errors.StaticPrototype);\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, Errors.ConstructorClassPrivateField);\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      node.key.id.name,\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(node.key.id.name, kind, node.key.start);\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // Overridden in typescript.js\n  parseAccessModifier(): ?N.Accessibility {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    // [In] production parameter is tracked in parseMaybeAssign\n    this.prodParam.enter(PARAM);\n\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.prodParam.exit();\n\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    // [In] production parameter is tracked in parseMaybeAssign\n    this.prodParam.enter(PARAM);\n\n    if (this.match(tt.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n    this.semicolon();\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (this.match(tt.name)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n\n      node.source = null;\n      node.declaration = null;\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.nextTokenStart();\n\n        // export async;\n        if (!this.isUnparsedContextual(next, \"function\")) {\n          this.unexpected(next, tt._function);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    if (this.match(tt.name)) {\n      return this.state.value !== \"async\" && this.state.value !== \"let\";\n    }\n\n    if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    return (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      this.isUnparsedContextual(next, \"from\")\n    );\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    if (this.match(tt.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      this.state.type.keyword === \"var\" ||\n      this.state.type.keyword === \"const\" ||\n      this.state.type.keyword === \"function\" ||\n      this.state.type.keyword === \"class\" ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            // check for keywords used as local names\n            this.checkReservedWord(\n              specifier.local.name,\n              specifier.local.start,\n              true,\n              false,\n            );\n            // check if export is defined\n            // $FlowIgnore\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[\n      this.state.decoratorStack.length - 1\n    ];\n    if (currentContextDecorators.length) {\n      const isClass =\n        node.declaration &&\n        (node.declaration.type === \"ClassDeclaration\" ||\n          node.declaration.type === \"ClassExpression\");\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n      }\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\")\n        ? this.parseIdentifier(true)\n        : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  // Parses import declaration.\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return this.match(tt.name);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      contextDescription,\n    );\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node: N.ImportDeclaration): void {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(\n        specifier.imported.name,\n        specifier.start,\n        true,\n        true,\n      );\n      specifier.local = specifier.imported.__clone();\n    }\n    this.checkLVal(\n      specifier.local,\n      BIND_LEXICAL,\n      undefined,\n      \"import specifier\",\n    );\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors } from \"../parser/location\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\ntype raiseFunction = (number, string, ...any) => void;\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ScopeHandler from \"../util/scope\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    const ScopeHandler = this.getScopeHandler();\n\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.prodParam = new ProductionParameterHandler();\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    let paramFlags = PARAM;\n    if (this.hasPlugin(\"topLevelAwait\") && this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { types as tokTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nexport { tokTypes };\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"],"names":["beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","regexp","string","eof","bracketL","bracketR","braceL","braceBarL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_SCOPE_OUTSIDE","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","isWhitespace","Position","line","col","column","SourceLocation","start","end","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","plugins","has","getPluginOption","plugin","get","last","stack","length","CommentsParser","addComment","comment","filename","loc","state","trailingComments","push","leadingComments","adjustCommentsAfterTrailingComma","node","elements","takeAllComments","lastElement","i","j","commentPreviousNode","splice","newTrailingComments","leadingComment","undefined","processComment","type","body","commentStack","firstChild","lastChild","lastInStack","pop","properties","arguments","slice","innerComments","Errors","Object","freeze","ArgumentsDisallowedInInitializer","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitExpressionFormalParameter","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ForInOfLoopInitializer","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallArityLtOne","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportMetaOutsideModule","ImportOutsideModule","InvalidCodePoint","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","ParamDupe","PatternHasAccessor","PatternHasMethod","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateNameRedeclaration","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","LocationParser","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","errorTemplate","params","raiseWithData","data","message","replace","_","_raise","errorContext","err","SyntaxError","errorRecovery","isLookahead","errors","isSimpleProperty","kind","method","superClass","estreeParseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","estreeParseBigIntLiteral","value","bigInt","BigInt","String","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","raw","extra","finishNodeAt","initFunction","isAsync","checkDeclaration","checkGetterSetterParams","prop","paramCount","checkLVal","expr","bindingType","checkClashes","contextDescription","disallowLetBinding","forEach","checkDuplicatedProto","protoRef","refExpressionErrors","computed","shorthand","key","used","doubleProto","isValidDirective","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parseExprAtom","tt","startPos","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","containsEsc","parseObjectProperty","toAssignable","toAssignableObjectExpressionProp","isLast","finishCallExpression","optional","callee","toReferencedListDeep","exprList","isParenthesizedExpr","TokContext","isExpr","preserveSpace","override","braceStatement","braceExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","curContext","prevType","allowed","prodParam","hasYield","isIterator","braceIsBlock","statementParens","test","b_stat","reservedWords","strict","strictBind","reservedWordsStrictSet","Set","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","fromCharCode","isIteratorStart","current","next","isIdentifierChar","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SpreadVariance","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","finishToken","val","matches","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","scope","declareName","enter","bodyNode","parseImport","exit","hasModuleExport","default","isLet","suggestion","parseExport","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","noIn","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","consequent","failed","tryParseConditionalConsequent","valid","invalid","getArrowLikeExpressions","alternate","parseMaybeAssign","noArrowParamsConversionAt","disallowInvalid","arrows","finishArrowValidation","every","isAssignable","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","specifiers","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","getTokenFromCode","charCodeAt","finishOp","readWord","isBinding","element","operator","trailingCommaPos","toReferencedList","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","isPrivateNameAllowed","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","tc","j_oTag","j_expr","arrowExpression","resetStartLocationFromNode","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","base","noCalls","parseCallExpressionArguments","abort","parseAsyncArrowWithTypeParameters","aborted","parseSubscript","subscriptState","isLookaheadRelational","optionalChainMember","stop","typeArguments","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","add","flowEnumStringMembers","initializedMembers","member","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagFragment","MissingClosingTagElement","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScope","allowSuper","currentThisScope","inClass","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasReturn","functionFlags","nonNull","x","assert","TSErrors","ClassMethodHasDeclare","ClassMethodHasReadonly","DeclareClassFieldHasInitializer","DuplicateModifier","EmptyHeritageClauseType","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasStatic","OptionalTypeBeforeRequired","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","TemplateTypeHasSubstitution","TypeAnnotationAfterAssign","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","hasPrecedingLineBreak","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsParseModifiers","modified","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","startNodeAtNode","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","restNode","tsParseType","lookaheadCharCode","raiseRestNotLast","optionalTypeNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","templateNode","parseTemplate","expressions","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","asserts","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","maybeInArrowParameters","oldYieldPos","yieldPos","oldAwaitPos","awaitPos","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","registerFunctionStatementId","nonNullExpression","atPossibleAsync","asyncArrowFn","parseTaggedTemplateExpression","args","parseExprOp","leftStartPos","leftStartLoc","minPrec","checkKeywords","checkDuplicateExports","isAbstractClass","parseStatementContent","ahead","parseClassMember","constructorAllowsSuper","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","equal","typeCast","ct","parseBindingAtom","parseMaybeDecoratorArguments","isInParens","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","placeholder","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","parseClassBody","expectPlugin","exported","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","identifier","some","Array","isArray","option","PIPELINE_PROPOSALS","validatePlugins","decoratorsBeforeExport","join","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","getOptions","opts","State","potentialArrowAt","inParameters","inPipeline","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","comments","octalPositions","exportedIdentifiers","tokensLength","curPosition","skipArrays","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","pushToken","checkKeywordEscapes","old","curr","nextTokenStart","thisTokEnd","skip","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isNonOctalDecimalInt","octal","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","n","readWord1","escStart","identifierCheck","esc","keywordTypes","parent","update","UtilParser","addExtra","op","afterNext","isUnparsedContextual","nameStart","nameEnd","messageOrType","missingPlugin","expectOnePlugin","names","checkYieldAwaitInDefaultParams","fn","oldState","abortSignal","checkExpressionErrors","andThrow","shorthandAssign","ExpressionErrors","Node","parser","range","NodeUtils","locationNode","unwrapParenthesizedExpression","LValParser","checkToRestConversion","arg","raiseTrailingCommaAfterRest","parseSpread","parseRestBinding","parseObj","close","closeCharCode","allowEmpty","elts","first","checkCommaAfterRest","parseDecorator","strictModeChanged","elem","ExpressionParser","getExpression","paramFlags","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","prec","logical","coalesce","checkPipelineAtInfixOperator","parseExprOpRightExpr","nextOp","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","parseExprSubscripts","maybeAsyncArrow","parseNoCallExpr","parseMaybePrivateName","classScope","usePrivateName","tag","quasi","importArg","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","innerParenStart","oldInFSharpPipelineDirectBody","parseExprListItem","parseImportMetaProperty","parseFunction","oldLabels","parseExprList","ret","parseFunctionExpression","parseDecorators","parseNew","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenStart","metaProp","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","create","parseObjectMember","isAsyncProp","isGetterOrSetterMethod","oldInPropertyName","generator","async","isExpression","oldInParameters","oldStrict","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","nameHash","identifierName","reservedTest","delegate","childExpression","pipelineStyle","checkSmartPipelineBodyStyle","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","topicReferenceWasUsedInCurrentTopicContext","isSimpleReference","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","StatementParser","interpreter","parseInterpreterDirective","from","nextCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","handler","clause","simple","finalizer","statementStart","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassPropertyName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","declarePrivateName","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","checkNames","isDefault","isFrom","nodes","parseNext","ClassScope","privateNames","loneAccessors","ClassScopeHandler","oldClassScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","Parser","pluginsMap","pluginMap","getParser","ast","moduleError","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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"}