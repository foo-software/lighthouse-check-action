{"version":3,"file":"bin.js","sourceRoot":"","sources":["../src/bin.ts"],"names":[],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n\nimport { join, resolve, dirname, parse as parsePath } from 'path';\nimport { inspect } from 'util';\nimport Module = require('module');\nimport arg = require('arg');\nimport { parse, createRequire, hasOwnProperty } from './util';\nimport {\n  EVAL_FILENAME,\n  EvalState,\n  createRepl,\n  ReplService,\n  setupContext,\n  STDIN_FILENAME,\n  EvalAwarePartialHost,\n  EVAL_NAME,\n  STDIN_NAME,\n  REPL_FILENAME,\n} from './repl';\nimport { VERSION, TSError, register } from './index';\nimport type { TSInternal } from './ts-compiler-types';\nimport { addBuiltinLibsToObject } from '../dist-raw/node-cjs-helpers';\n\n/**\n * Main `bin` functionality.\n */\nexport function main(\n  argv: string[] = process.argv.slice(2),\n  entrypointArgs: Record<string, any> = {}\n) {\n  const args = {\n    ...entrypointArgs,\n    ...arg(\n      {\n        // Node.js-like options.\n        '--eval': String,\n        '--interactive': Boolean,\n        '--print': Boolean,\n        '--require': [String],\n\n        // CLI options.\n        '--help': Boolean,\n        '--cwd-mode': Boolean,\n        '--script-mode': Boolean,\n        '--version': arg.COUNT,\n        '--show-config': Boolean,\n\n        // Project options.\n        '--cwd': String,\n        '--files': Boolean,\n        '--compiler': String,\n        '--compiler-options': parse,\n        '--project': String,\n        '--ignore-diagnostics': [String],\n        '--ignore': [String],\n        '--transpile-only': Boolean,\n        '--transpiler': String,\n        '--type-check': Boolean,\n        '--compiler-host': Boolean,\n        '--pretty': Boolean,\n        '--skip-project': Boolean,\n        '--skip-ignore': Boolean,\n        '--prefer-ts-exts': Boolean,\n        '--log-error': Boolean,\n        '--emit': Boolean,\n        '--scope': Boolean,\n        '--scope-dir': String,\n        '--no-experimental-repl-await': Boolean,\n\n        // Aliases.\n        '-e': '--eval',\n        '-i': '--interactive',\n        '-p': '--print',\n        '-r': '--require',\n        '-h': '--help',\n        '-s': '--script-mode',\n        '-v': '--version',\n        '-T': '--transpile-only',\n        '-H': '--compiler-host',\n        '-I': '--ignore',\n        '-P': '--project',\n        '-C': '--compiler',\n        '-D': '--ignore-diagnostics',\n        '-O': '--compiler-options',\n        '--dir': '--cwd',\n        '--showConfig': '--show-config',\n        '--scopeDir': '--scope-dir',\n      },\n      {\n        argv,\n        stopAtPositional: true,\n      }\n    ),\n  };\n\n  // Only setting defaults for CLI-specific flags\n  // Anything passed to `register()` can be `undefined`; `create()` will apply\n  // defaults.\n  const {\n    '--cwd': cwdArg,\n    '--help': help = false,\n    '--script-mode': scriptMode,\n    '--cwd-mode': cwdMode,\n    '--version': version = 0,\n    '--show-config': showConfig,\n    '--require': argsRequire = [],\n    '--eval': code = undefined,\n    '--print': print = false,\n    '--interactive': interactive = false,\n    '--files': files,\n    '--compiler': compiler,\n    '--compiler-options': compilerOptions,\n    '--project': project,\n    '--ignore-diagnostics': ignoreDiagnostics,\n    '--ignore': ignore,\n    '--transpile-only': transpileOnly,\n    '--type-check': typeCheck,\n    '--transpiler': transpiler,\n    '--compiler-host': compilerHost,\n    '--pretty': pretty,\n    '--skip-project': skipProject,\n    '--skip-ignore': skipIgnore,\n    '--prefer-ts-exts': preferTsExts,\n    '--log-error': logError,\n    '--emit': emit,\n    '--scope': scope = undefined,\n    '--scope-dir': scopeDir = undefined,\n    '--no-experimental-repl-await': noExperimentalReplAwait,\n  } = args;\n\n  if (help) {\n    console.log(`\n  Usage: ts-node [options] [ -e script | script.ts ] [arguments]\n\n  Options:\n\n    -e, --eval [code]               Evaluate code\n    -p, --print                     Print result of \\`--eval\\`\n    -r, --require [path]            Require a node module before execution\n    -i, --interactive               Opens the REPL even if stdin does not appear to be a terminal\n\n    -h, --help                      Print CLI usage\n    -v, --version                   Print module version information\n    --cwd-mode                      Use current directory instead of <script.ts> for config resolution\n    --show-config                   Print resolved configuration and exit\n\n    -T, --transpile-only            Use TypeScript's faster \\`transpileModule\\` or a third-party transpiler\n    -H, --compiler-host             Use TypeScript's compiler host API\n    -I, --ignore [pattern]          Override the path patterns to skip compilation\n    -P, --project [path]            Path to TypeScript JSON project file\n    -C, --compiler [name]           Specify a custom TypeScript compiler\n    --transpiler [name]             Specify a third-party, non-typechecking transpiler\n    -D, --ignore-diagnostics [code] Ignore TypeScript warnings by diagnostic code\n    -O, --compiler-options [opts]   JSON object to merge with compiler options\n\n    --cwd                           Behave as if invoked within this working directory.\n    --files                         Load \\`files\\`, \\`include\\` and \\`exclude\\` from \\`tsconfig.json\\` on startup\n    --pretty                        Use pretty diagnostic formatter (usually enabled by default)\n    --skip-project                  Skip reading \\`tsconfig.json\\`\n    --skip-ignore                   Skip \\`--ignore\\` checks\n    --scope                         Scope compiler to files within \\`scopeDir\\`.  Anything outside this directory is ignored.\n    --scope-dir                     Directory for \\`--scope\\`\n    --prefer-ts-exts                Prefer importing TypeScript files over JavaScript files\n    --log-error                     Logs TypeScript errors to stderr instead of throwing exceptions\n    --no-experimental-repl-await    Disable top-level await in REPL.  Equivalent to node's --no-experimental-repl-await\n  `);\n\n    process.exit(0);\n  }\n\n  // Output project information.\n  if (version === 1) {\n    console.log(`v${VERSION}`);\n    process.exit(0);\n  }\n\n  // Figure out which we are executing: piped stdin, --eval, REPL, and/or entrypoint\n  // This is complicated because node's behavior is complicated\n  // `node -e code -i ./script.js` ignores -e\n  const executeEval = code != null && !(interactive && args._.length);\n  const executeEntrypoint = !executeEval && args._.length > 0;\n  const executeRepl =\n    !executeEntrypoint &&\n    (interactive || (process.stdin.isTTY && !executeEval));\n  const executeStdin = !executeEval && !executeRepl && !executeEntrypoint;\n\n  const cwd = cwdArg || process.cwd();\n  /** Unresolved.  May point to a symlink, not realpath.  May be missing file extension */\n  const scriptPath = executeEntrypoint ? resolve(cwd, args._[0]) : undefined;\n\n  /**\n   * <repl>, [stdin], and [eval] are all essentially virtual files that do not exist on disc and are backed by a REPL\n   * service to handle eval-ing of code.\n   */\n  interface VirtualFileState {\n    state: EvalState;\n    repl: ReplService;\n    module?: Module;\n  }\n  let evalStuff: VirtualFileState | undefined;\n  let replStuff: VirtualFileState | undefined;\n  let stdinStuff: VirtualFileState | undefined;\n  let evalAwarePartialHost: EvalAwarePartialHost | undefined = undefined;\n  if (executeEval) {\n    const state = new EvalState(join(cwd, EVAL_FILENAME));\n    evalStuff = {\n      state,\n      repl: createRepl({\n        state,\n        composeWithEvalAwarePartialHost: evalAwarePartialHost,\n        ignoreDiagnosticsThatAreAnnoyingInInteractiveRepl: false,\n      }),\n    };\n    ({ evalAwarePartialHost } = evalStuff.repl);\n    // Create a local module instance based on `cwd`.\n    const module = (evalStuff.module = new Module(EVAL_NAME));\n    module.filename = evalStuff.state.path;\n    module.paths = (Module as any)._nodeModulePaths(cwd);\n  }\n  if (executeStdin) {\n    const state = new EvalState(join(cwd, STDIN_FILENAME));\n    stdinStuff = {\n      state,\n      repl: createRepl({\n        state,\n        composeWithEvalAwarePartialHost: evalAwarePartialHost,\n        ignoreDiagnosticsThatAreAnnoyingInInteractiveRepl: false,\n      }),\n    };\n    ({ evalAwarePartialHost } = stdinStuff.repl);\n    // Create a local module instance based on `cwd`.\n    const module = (stdinStuff.module = new Module(STDIN_NAME));\n    module.filename = stdinStuff.state.path;\n    module.paths = (Module as any)._nodeModulePaths(cwd);\n  }\n  if (executeRepl) {\n    const state = new EvalState(join(cwd, REPL_FILENAME));\n    replStuff = {\n      state,\n      repl: createRepl({\n        state,\n        composeWithEvalAwarePartialHost: evalAwarePartialHost,\n      }),\n    };\n    ({ evalAwarePartialHost } = replStuff.repl);\n  }\n\n  // Register the TypeScript compiler instance.\n  const service = register({\n    cwd,\n    emit,\n    files,\n    pretty,\n    transpileOnly: transpileOnly ?? transpiler != null ? true : undefined,\n    experimentalReplAwait: noExperimentalReplAwait ? false : undefined,\n    typeCheck,\n    transpiler,\n    compilerHost,\n    ignore,\n    preferTsExts,\n    logError,\n    projectSearchDir: getProjectSearchDir(cwd, scriptMode, cwdMode, scriptPath),\n    project,\n    skipProject,\n    skipIgnore,\n    compiler,\n    ignoreDiagnostics,\n    compilerOptions,\n    require: argsRequire,\n    readFile: evalAwarePartialHost?.readFile ?? undefined,\n    fileExists: evalAwarePartialHost?.fileExists ?? undefined,\n    scope,\n    scopeDir,\n  });\n\n  // Bind REPL service to ts-node compiler service (chicken-and-egg problem)\n  replStuff?.repl.setService(service);\n  evalStuff?.repl.setService(service);\n  stdinStuff?.repl.setService(service);\n\n  // Output project information.\n  if (version >= 2) {\n    console.log(`ts-node v${VERSION}`);\n    console.log(`node ${process.version}`);\n    console.log(`compiler v${service.ts.version}`);\n    process.exit(0);\n  }\n\n  if (showConfig) {\n    const ts = (service.ts as any) as TSInternal;\n    if (typeof ts.convertToTSConfig !== 'function') {\n      console.error(\n        'Error: --show-config requires a typescript versions >=3.2 that support --showConfig'\n      );\n      process.exit(1);\n    }\n    const json = {\n      ['ts-node']: {\n        ...service.options,\n        optionBasePaths: undefined,\n        experimentalEsmLoader: undefined,\n        compilerOptions: undefined,\n        project: service.configFilePath ?? service.options.project,\n      },\n      ...ts.convertToTSConfig(\n        service.config,\n        service.configFilePath ?? join(cwd, 'ts-node-implicit-tsconfig.json'),\n        service.ts.sys\n      ),\n    };\n    console.log(\n      // Assumes that all configuration options which can possibly be specified via the CLI are JSON-compatible.\n      // If, in the future, we must log functions, for example readFile and fileExists, then we can implement a JSON\n      // replacer function.\n      JSON.stringify(json, null, 2)\n    );\n    process.exit(0);\n  }\n\n  // Prepend `ts-node` arguments to CLI for child processes.\n  process.execArgv.unshift(\n    __filename,\n    ...process.argv.slice(2, process.argv.length - args._.length)\n  );\n  process.argv = [process.argv[1]]\n    .concat(executeEntrypoint ? ([scriptPath] as string[]) : [])\n    .concat(args._.slice(executeEntrypoint ? 1 : 0));\n\n  // Execute the main contents (either eval, script or piped).\n  if (executeEntrypoint) {\n    Module.runMain();\n  } else {\n    // Note: eval and repl may both run, but never with stdin.\n    // If stdin runs, eval and repl will not.\n    if (executeEval) {\n      addBuiltinLibsToObject(global);\n      evalAndExitOnTsError(\n        evalStuff!.repl,\n        evalStuff!.module!,\n        code!,\n        print,\n        'eval'\n      );\n    }\n\n    if (executeRepl) {\n      replStuff!.repl.start();\n    }\n\n    if (executeStdin) {\n      let buffer = code || '';\n      process.stdin.on('data', (chunk: Buffer) => (buffer += chunk));\n      process.stdin.on('end', () => {\n        evalAndExitOnTsError(\n          stdinStuff!.repl,\n          stdinStuff!.module!,\n          buffer,\n          // `echo 123 | node -p` still prints 123\n          print,\n          'stdin'\n        );\n      });\n    }\n  }\n}\n\n/**\n * Get project search path from args.\n */\nfunction getProjectSearchDir(\n  cwd?: string,\n  scriptMode?: boolean,\n  cwdMode?: boolean,\n  scriptPath?: string\n) {\n  // Validate `--script-mode` / `--cwd-mode` / `--cwd` usage is correct.\n  if (scriptMode && cwdMode) {\n    throw new TypeError('--cwd-mode cannot be combined with --script-mode');\n  }\n  if (scriptMode && !scriptPath) {\n    throw new TypeError(\n      '--script-mode must be used with a script name, e.g. `ts-node --script-mode <script.ts>`'\n    );\n  }\n  const doScriptMode =\n    scriptMode === true ? true : cwdMode === true ? false : !!scriptPath;\n  if (doScriptMode) {\n    // Use node's own resolution behavior to ensure we follow symlinks.\n    // scriptPath may omit file extension or point to a directory with or without package.json.\n    // This happens before we are registered, so we tell node's resolver to consider ts, tsx, and jsx files.\n    // In extremely rare cases, is is technically possible to resolve the wrong directory,\n    // because we do not yet know preferTsExts, jsx, nor allowJs.\n    // See also, justification why this will not happen in real-world situations:\n    // https://github.com/TypeStrong/ts-node/pull/1009#issuecomment-613017081\n    const exts = ['.js', '.jsx', '.ts', '.tsx'];\n    const extsTemporarilyInstalled: string[] = [];\n    for (const ext of exts) {\n      if (!hasOwnProperty(require.extensions, ext)) {\n        extsTemporarilyInstalled.push(ext);\n        require.extensions[ext] = function () {};\n      }\n    }\n    try {\n      return dirname(requireResolveNonCached(scriptPath!));\n    } finally {\n      for (const ext of extsTemporarilyInstalled) {\n        delete require.extensions[ext];\n      }\n    }\n  }\n\n  return cwd;\n}\n\nconst guaranteedNonexistentDirectoryPrefix = resolve(__dirname, 'doesnotexist');\nlet guaranteedNonexistentDirectorySuffix = 0;\n\n/**\n * require.resolve an absolute path, tricking node into *not* caching the results.\n * Necessary so that we do not pollute require.resolve cache prior to installing require.extensions\n *\n * Is a terrible hack, because node does not expose the necessary cache invalidation APIs\n * https://stackoverflow.com/questions/59865584/how-to-invalidate-cached-require-resolve-results\n */\nfunction requireResolveNonCached(absoluteModuleSpecifier: string) {\n  // node 10 and 11 fallback: The trick below triggers a node 10 & 11 bug\n  // On those node versions, pollute the require cache instead.  This is a deliberate\n  // ts-node limitation that will *rarely* manifest, and will not matter once node 10\n  // is end-of-life'd on 2021-04-30\n  const isSupportedNodeVersion =\n    parseInt(process.versions.node.split('.')[0], 10) >= 12;\n  if (!isSupportedNodeVersion) return require.resolve(absoluteModuleSpecifier);\n\n  const { dir, base } = parsePath(absoluteModuleSpecifier);\n  const relativeModuleSpecifier = `./${base}`;\n\n  const req = createRequire(\n    join(dir, 'imaginaryUncacheableRequireResolveScript')\n  );\n  return req.resolve(relativeModuleSpecifier, {\n    paths: [\n      `${guaranteedNonexistentDirectoryPrefix}${guaranteedNonexistentDirectorySuffix++}`,\n      ...(req.resolve.paths(relativeModuleSpecifier) || []),\n    ],\n  });\n}\n\n/**\n * Evaluate an [eval] or [stdin] script\n */\nfunction evalAndExitOnTsError(\n  replService: ReplService,\n  module: Module,\n  code: string,\n  isPrinted: boolean,\n  filenameAndDirname: 'eval' | 'stdin'\n) {\n  let result: any;\n  setupContext(global, module, filenameAndDirname);\n\n  try {\n    result = replService.evalCode(code);\n  } catch (error) {\n    if (error instanceof TSError) {\n      console.error(error);\n      process.exit(1);\n    }\n\n    throw error;\n  }\n\n  if (isPrinted) {\n    console.log(\n      typeof result === 'string'\n        ? result\n        : inspect(result, { colors: process.stdout.isTTY })\n    );\n  }\n}\n\nif (require.main === module) {\n  main();\n}\n"]}